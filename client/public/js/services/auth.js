(function() {
  angular.module("moedit.Services").factory("moedit.Auth", [
    '$rootScope', 'ipCookie', '$log', function($rootScope, ipCookie, $log) {
      var self;
      self = {
        login: function(username, password) {
          var authCookie, success;
          $log.debug("login user: " + username + ", password: " + password);
          authCookie = ipCookie(cookieKey);
          $log.debug("login user: auth cookie is " + (JSON.stringify(authCookie)));
          $log.debug("received login response: " + (JSON.stringify(loginData)));
          success = true;
          if (success) {
            $rootScope.user = {
              name: username,
              sessionToken: password
            };
            ipCookie(cookieKey, $rootScope.user, cookieOptions);
            return $rootScope.userLoggedIn = true;
          }
        },
        logout: function() {
          $rootScope.user = null;
          $rootScope.userLoggedIn = false;
          return ipCookie.remove(cookieKey);
        },
        isLoggedIn: function() {
          var authCookie, fake;
          authCookie = ipCookie(cookieKey);
          $log.info("isLoggedIn: auth cookie is " + (JSON.stringify(authCookie)));
          fake = false;
          if (fake) {
            this.login("John Doe", "secret");
            $rootScope.userLoggedIn = true;
          }
          $log.info("isLoggedIn: $rootScope.userLoggedIn is " + $rootScope.userLoggedIn);
          return $rootScope.userLoggedIn;
        }
      };
      return self;
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2F1dGguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsRUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLGlCQUFmLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsYUFBMUMsRUFBeUQ7SUFDeEQsWUFEd0QsRUFFeEQsVUFGd0QsRUFHeEQsTUFId0QsRUFJeEQsU0FBQyxVQUFELEVBQWEsUUFBYixFQUF1QixJQUF2QixHQUFBO0FBRUMsVUFBQSxJQUFBO0FBQUEsTUFBQSxJQUFBLEdBQ0M7QUFBQSxRQUFBLEtBQUEsRUFBTyxTQUFDLFFBQUQsRUFBVyxRQUFYLEdBQUE7QUFDTixjQUFBLG1CQUFBO0FBQUEsVUFBQSxJQUFJLENBQUMsS0FBTCxDQUFXLGNBQUEsR0FBZSxRQUFmLEdBQXdCLGNBQXhCLEdBQXNDLFFBQWpELENBQUEsQ0FBQTtBQUFBLFVBQ0EsVUFBQSxHQUFhLFFBQUEsQ0FBUyxTQUFULENBRGIsQ0FBQTtBQUFBLFVBRUEsSUFBSSxDQUFDLEtBQUwsQ0FBVyw2QkFBQSxHQUE2QixDQUFDLElBQUksQ0FBQyxTQUFMLENBQWUsVUFBZixDQUFELENBQXhDLENBRkEsQ0FBQTtBQUFBLFVBS0EsSUFBSSxDQUFDLEtBQUwsQ0FBVywyQkFBQSxHQUEyQixDQUFDLElBQUksQ0FBQyxTQUFMLENBQWUsU0FBZixDQUFELENBQXRDLENBTEEsQ0FBQTtBQUFBLFVBTUEsT0FBQSxHQUFVLElBTlYsQ0FBQTtBQU9BLFVBQUEsSUFBRyxPQUFIO0FBQ0MsWUFBQSxVQUFVLENBQUMsSUFBWCxHQUNDO0FBQUEsY0FBQSxJQUFBLEVBQU0sUUFBTjtBQUFBLGNBQ0EsWUFBQSxFQUFjLFFBRGQ7YUFERCxDQUFBO0FBQUEsWUFLQSxRQUFBLENBQVMsU0FBVCxFQUFvQixVQUFVLENBQUMsSUFBL0IsRUFBcUMsYUFBckMsQ0FMQSxDQUFBO21CQU1BLFVBQVUsQ0FBQyxZQUFYLEdBQTBCLEtBUDNCO1dBUk07UUFBQSxDQUFQO0FBQUEsUUFpQkEsTUFBQSxFQUFRLFNBQUEsR0FBQTtBQUNQLFVBQUEsVUFBVSxDQUFDLElBQVgsR0FBa0IsSUFBbEIsQ0FBQTtBQUFBLFVBQ0EsVUFBVSxDQUFDLFlBQVgsR0FBMEIsS0FEMUIsQ0FBQTtpQkFFQSxRQUFRLENBQUMsTUFBVCxDQUFnQixTQUFoQixFQUhPO1FBQUEsQ0FqQlI7QUFBQSxRQXNCQSxVQUFBLEVBQVksU0FBQSxHQUFBO0FBQ1gsY0FBQSxnQkFBQTtBQUFBLFVBQUEsVUFBQSxHQUFhLFFBQUEsQ0FBUyxTQUFULENBQWIsQ0FBQTtBQUFBLFVBQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSw2QkFBQSxHQUE2QixDQUFDLElBQUksQ0FBQyxTQUFMLENBQWUsVUFBZixDQUFELENBQXZDLENBREEsQ0FBQTtBQUFBLFVBRUEsSUFBQSxHQUFPLEtBRlAsQ0FBQTtBQUdBLFVBQUEsSUFBRyxJQUFIO0FBQ0MsWUFBQSxJQUFDLENBQUEsS0FBRCxDQUFPLFVBQVAsRUFBbUIsUUFBbkIsQ0FBQSxDQUFBO0FBQUEsWUFDQSxVQUFVLENBQUMsWUFBWCxHQUEwQixJQUQxQixDQUREO1dBSEE7QUFBQSxVQU9BLElBQUksQ0FBQyxJQUFMLENBQVUseUNBQUEsR0FBMEMsVUFBVSxDQUFDLFlBQS9ELENBUEEsQ0FBQTtpQkFRQSxVQUFVLENBQUMsYUFUQTtRQUFBLENBdEJaO09BREQsQ0FBQTthQWtDQSxLQXBDRDtJQUFBLENBSndEO0dBQXpELENBQUEsQ0FBQTtBQUFBIiwiZmlsZSI6InNlcnZpY2VzL2F1dGguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZShcIm1vZWRpdC5TZXJ2aWNlc1wiKS5mYWN0b3J5IFwibW9lZGl0LkF1dGhcIiwgWyBcblx0JyRyb290U2NvcGUnXG5cdCdpcENvb2tpZSdcblx0JyRsb2cnXG5cdCgkcm9vdFNjb3BlLCBpcENvb2tpZSwgJGxvZykgLT5cblxuXHRcdHNlbGYgPVxuXHRcdFx0bG9naW46ICh1c2VybmFtZSwgcGFzc3dvcmQpIC0+XG5cdFx0XHRcdCRsb2cuZGVidWcgXCJsb2dpbiB1c2VyOiAje3VzZXJuYW1lfSwgcGFzc3dvcmQ6ICN7cGFzc3dvcmR9XCJcblx0XHRcdFx0YXV0aENvb2tpZSA9IGlwQ29va2llIGNvb2tpZUtleVxuXHRcdFx0XHQkbG9nLmRlYnVnIFwibG9naW4gdXNlcjogYXV0aCBjb29raWUgaXMgI3tKU09OLnN0cmluZ2lmeShhdXRoQ29va2llKX1cIlxuXG5cdFx0XHRcdCMgYXNrIHNlcnZlclxuXHRcdFx0XHQkbG9nLmRlYnVnIFwicmVjZWl2ZWQgbG9naW4gcmVzcG9uc2U6ICN7SlNPTi5zdHJpbmdpZnkobG9naW5EYXRhKX1cIlxuXHRcdFx0XHRzdWNjZXNzID0gdHJ1ZSAjIFRPRE9cblx0XHRcdFx0aWYgc3VjY2Vzc1xuXHRcdFx0XHRcdCRyb290U2NvcGUudXNlciA9XG5cdFx0XHRcdFx0XHRuYW1lOiB1c2VybmFtZVxuXHRcdFx0XHRcdFx0c2Vzc2lvblRva2VuOiBwYXNzd29yZCAjIFRPRE86IGNoYW5nZSB0aGlzXG5cblx0XHRcdFx0XHQjIHNldCBjb29raWVcblx0XHRcdFx0XHRpcENvb2tpZSBjb29raWVLZXksICRyb290U2NvcGUudXNlciwgY29va2llT3B0aW9uc1xuXHRcdFx0XHRcdCRyb290U2NvcGUudXNlckxvZ2dlZEluID0gdHJ1ZVxuXG5cdFx0XHRsb2dvdXQ6IC0+XG5cdFx0XHRcdCRyb290U2NvcGUudXNlciA9IG51bGxcblx0XHRcdFx0JHJvb3RTY29wZS51c2VyTG9nZ2VkSW4gPSBmYWxzZVxuXHRcdFx0XHRpcENvb2tpZS5yZW1vdmUgY29va2llS2V5XG5cblx0XHRcdGlzTG9nZ2VkSW46IC0+XG5cdFx0XHRcdGF1dGhDb29raWUgPSBpcENvb2tpZSBjb29raWVLZXlcblx0XHRcdFx0JGxvZy5pbmZvIFwiaXNMb2dnZWRJbjogYXV0aCBjb29raWUgaXMgI3tKU09OLnN0cmluZ2lmeShhdXRoQ29va2llKX1cIlxuXHRcdFx0XHRmYWtlID0gZmFsc2Vcblx0XHRcdFx0aWYgZmFrZVxuXHRcdFx0XHRcdEBsb2dpbiBcIkpvaG4gRG9lXCIsIFwic2VjcmV0XCJcblx0XHRcdFx0XHQkcm9vdFNjb3BlLnVzZXJMb2dnZWRJbiA9IHRydWVcblxuXHRcdFx0XHQkbG9nLmluZm8gXCJpc0xvZ2dlZEluOiAkcm9vdFNjb3BlLnVzZXJMb2dnZWRJbiBpcyAjeyRyb290U2NvcGUudXNlckxvZ2dlZElufVwiXG5cdFx0XHRcdCRyb290U2NvcGUudXNlckxvZ2dlZEluXG5cblx0XHRzZWxmXG5dIl19