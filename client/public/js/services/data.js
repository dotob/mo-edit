(function() {
  angular.module('moedit.Services').factory('moedit.Data', [
    '$rootScope', '$log', '$http', '$q', function($rootScope, $log, $http, $q) {
      var self;
      self = {
        documents: function() {
          var deferred;
          deferred = $q.defer();
          $http.get('/documents').then(function(response) {
            return deferred.resolve(response.data);
          });
          return deferred.promise;
        },
        document: function(docid) {
          var deferred;
          deferred = $q.defer();
          $http.get("/documents/" + docid).then(function(response) {
            return deferred.resolve(response.data);
          });
          return deferred.promise;
        },
        documentVersions: function(docKey) {
          var deferred;
          deferred = $q.defer();
          this.documents().then(function(documents) {
            var docsWithKey;
            docsWithKey = _.filter(documents, function(d) {
              return d.key === docKey;
            });
            return deferred.resolve(docsWithKey);
          });
          return deferred.promise;
        },
        saveDocument: function(doc) {
          if (doc._id != null) {
            return $http.put("/documents/" + doc._id, doc);
          } else {
            return $http.put("/documents/", doc);
          }
        },
        deleteDocument: function(doc) {
          return $http["delete"]("/documents/" + doc._id);
        },
        authors: function() {}
      };
      return self;
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2RhdGEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsRUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLGlCQUFmLENBQWlDLENBQUMsT0FBbEMsQ0FBMEMsYUFBMUMsRUFBeUQ7SUFDeEQsWUFEd0QsRUFFeEQsTUFGd0QsRUFHeEQsT0FId0QsRUFJeEQsSUFKd0QsRUFLeEQsU0FBQyxVQUFELEVBQWEsSUFBYixFQUFtQixLQUFuQixFQUEwQixFQUExQixHQUFBO0FBRUMsVUFBQSxJQUFBO0FBQUEsTUFBQSxJQUFBLEdBQ0M7QUFBQSxRQUFBLFNBQUEsRUFBVyxTQUFBLEdBQUE7QUFDVixjQUFBLFFBQUE7QUFBQSxVQUFBLFFBQUEsR0FBVyxFQUFFLENBQUMsS0FBSCxDQUFBLENBQVgsQ0FBQTtBQUFBLFVBQ0EsS0FBSyxDQUFDLEdBQU4sQ0FBVSxZQUFWLENBQXVCLENBQUMsSUFBeEIsQ0FBNkIsU0FBQyxRQUFELEdBQUE7bUJBQzVCLFFBQVEsQ0FBQyxPQUFULENBQWlCLFFBQVEsQ0FBQyxJQUExQixFQUQ0QjtVQUFBLENBQTdCLENBREEsQ0FBQTtpQkFHQSxRQUFRLENBQUMsUUFKQztRQUFBLENBQVg7QUFBQSxRQU1BLFFBQUEsRUFBVSxTQUFDLEtBQUQsR0FBQTtBQUNULGNBQUEsUUFBQTtBQUFBLFVBQUEsUUFBQSxHQUFXLEVBQUUsQ0FBQyxLQUFILENBQUEsQ0FBWCxDQUFBO0FBQUEsVUFDQSxLQUFLLENBQUMsR0FBTixDQUFVLGFBQUEsR0FBYyxLQUF4QixDQUFnQyxDQUFDLElBQWpDLENBQXNDLFNBQUMsUUFBRCxHQUFBO21CQUNyQyxRQUFRLENBQUMsT0FBVCxDQUFpQixRQUFRLENBQUMsSUFBMUIsRUFEcUM7VUFBQSxDQUF0QyxDQURBLENBQUE7aUJBR0EsUUFBUSxDQUFDLFFBSkE7UUFBQSxDQU5WO0FBQUEsUUFZQSxnQkFBQSxFQUFrQixTQUFDLE1BQUQsR0FBQTtBQUNqQixjQUFBLFFBQUE7QUFBQSxVQUFBLFFBQUEsR0FBVyxFQUFFLENBQUMsS0FBSCxDQUFBLENBQVgsQ0FBQTtBQUFBLFVBRUEsSUFBQyxDQUFBLFNBQUQsQ0FBQSxDQUFZLENBQUMsSUFBYixDQUFrQixTQUFDLFNBQUQsR0FBQTtBQUNqQixnQkFBQSxXQUFBO0FBQUEsWUFBQSxXQUFBLEdBQWMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxTQUFULEVBQW9CLFNBQUMsQ0FBRCxHQUFBO3FCQUFPLENBQUMsQ0FBQyxHQUFGLEtBQVMsT0FBaEI7WUFBQSxDQUFwQixDQUFkLENBQUE7bUJBQ0EsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsV0FBakIsRUFGaUI7VUFBQSxDQUFsQixDQUZBLENBQUE7aUJBS0EsUUFBUSxDQUFDLFFBTlE7UUFBQSxDQVpsQjtBQUFBLFFBb0JBLFlBQUEsRUFBYyxTQUFDLEdBQUQsR0FBQTtBQUNiLFVBQUEsSUFBRyxlQUFIO21CQUNDLEtBQUssQ0FBQyxHQUFOLENBQVUsYUFBQSxHQUFjLEdBQUcsQ0FBQyxHQUE1QixFQUFtQyxHQUFuQyxFQUREO1dBQUEsTUFBQTttQkFHQyxLQUFLLENBQUMsR0FBTixDQUFVLGFBQVYsRUFBeUIsR0FBekIsRUFIRDtXQURhO1FBQUEsQ0FwQmQ7QUFBQSxRQTBCQSxjQUFBLEVBQWdCLFNBQUMsR0FBRCxHQUFBO2lCQUNmLEtBQUssQ0FBQyxRQUFELENBQUwsQ0FBYSxhQUFBLEdBQWMsR0FBRyxDQUFDLEdBQS9CLEVBRGU7UUFBQSxDQTFCaEI7QUFBQSxRQTZCQSxPQUFBLEVBQVMsU0FBQSxHQUFBLENBN0JUO09BREQsQ0FBQTthQWlDQSxLQW5DRDtJQUFBLENBTHdEO0dBQXpELENBQUEsQ0FBQTtBQUFBIiwiZmlsZSI6InNlcnZpY2VzL2RhdGEuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnbW9lZGl0LlNlcnZpY2VzJykuZmFjdG9yeSAnbW9lZGl0LkRhdGEnLCBbIFxuXHQnJHJvb3RTY29wZSdcblx0JyRsb2cnXG5cdCckaHR0cCdcblx0JyRxJ1xuXHQoJHJvb3RTY29wZSwgJGxvZywgJGh0dHAsICRxKSAtPlxuXG5cdFx0c2VsZiA9XG5cdFx0XHRkb2N1bWVudHM6IC0+XG5cdFx0XHRcdGRlZmVycmVkID0gJHEuZGVmZXIoKVxuXHRcdFx0XHQkaHR0cC5nZXQoJy9kb2N1bWVudHMnKS50aGVuIChyZXNwb25zZSkgLT5cblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlIHJlc3BvbnNlLmRhdGFcblx0XHRcdFx0ZGVmZXJyZWQucHJvbWlzZVxuXHRcdFx0XG5cdFx0XHRkb2N1bWVudDogKGRvY2lkKSAtPlxuXHRcdFx0XHRkZWZlcnJlZCA9ICRxLmRlZmVyKClcblx0XHRcdFx0JGh0dHAuZ2V0KFwiL2RvY3VtZW50cy8je2RvY2lkfVwiKS50aGVuIChyZXNwb25zZSkgLT5cblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlIHJlc3BvbnNlLmRhdGFcblx0XHRcdFx0ZGVmZXJyZWQucHJvbWlzZVxuXHRcdFx0XG5cdFx0XHRkb2N1bWVudFZlcnNpb25zOiAoZG9jS2V5KSAtPlxuXHRcdFx0XHRkZWZlcnJlZCA9ICRxLmRlZmVyKClcblx0XHRcdFx0IyBUT0RPOiBtYWtlIHRoaXMgbW9yZSBzbWFydFxuXHRcdFx0XHRAZG9jdW1lbnRzKCkudGhlbiAoZG9jdW1lbnRzKSAtPlxuXHRcdFx0XHRcdGRvY3NXaXRoS2V5ID0gXy5maWx0ZXIgZG9jdW1lbnRzLCAoZCkgLT4gZC5rZXkgPT0gZG9jS2V5XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZSBkb2NzV2l0aEtleVxuXHRcdFx0XHRkZWZlcnJlZC5wcm9taXNlXG5cblx0XHRcdHNhdmVEb2N1bWVudDogKGRvYykgLT5cblx0XHRcdFx0aWYgZG9jLl9pZD9cblx0XHRcdFx0XHQkaHR0cC5wdXQgXCIvZG9jdW1lbnRzLyN7ZG9jLl9pZH1cIiwgZG9jXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHQkaHR0cC5wdXQgXCIvZG9jdW1lbnRzL1wiLCBkb2NcblxuXHRcdFx0ZGVsZXRlRG9jdW1lbnQ6IChkb2MpIC0+XG5cdFx0XHRcdCRodHRwLmRlbGV0ZSBcIi9kb2N1bWVudHMvI3tkb2MuX2lkfVwiXG5cblx0XHRcdGF1dGhvcnM6IC0+XG5cblxuXHRcdHNlbGZcbl0iXX0=