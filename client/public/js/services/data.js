(function() {
  angular.module('moedit.Services').factory('moedit.Data', [
    '$rootScope', '$log', '$http', '$q', function($rootScope, $log, $http, $q) {
      var self;
      self = {
        documents: function() {
          var deferred;
          deferred = $q.defer();
          $http.get('/documents').then(function(response) {
            return deferred.resolve(response.data);
          });
          return deferred.promise;
        },
        document: function(docid) {
          var deferred;
          deferred = $q.defer();
          $http.get("/documents/" + docid).then(function(response) {
            return deferred.resolve(response.data);
          });
          return deferred.promise;
        },
        documentVersions: function(docKey) {
          var deferred;
          deferred = $q.defer();
          this.documents().then(function(documents) {
            var docsWithKey;
            docsWithKey = _.filter(documents, function(d) {
              return d.key === docKey;
            });
            return deferred.resolve(docsWithKey);
          });
          return deferred.promise;
        },
        getPreviousVersion: function(document) {
          var deferred;
          deferred = $q.defer();
          this.documentVersions(document.key).then(function(versions) {
            var previousVersion, previousVersionDocument;
            previousVersion = document.version - 1;
            console.log("pv: " + previousVersion);
            if (previousVersion < 0) {
              return deferred.resolve(null);
            } else {
              previousVersionDocument = _.find(versions, function(d) {
                return d.version === previousVersion;
              });
              return deferred.resolve(previousVersionDocument);
            }
          });
          return deferred.promise;
        },
        getNextVersion: function(document) {
          var deferred;
          deferred = $q.defer();
          this.documentVersions(document.key).then(function(versions) {
            var nextVersion, nextVersionDocument;
            nextVersion = document.version + 1;
            console.log("nv: " + nextVersion);
            nextVersionDocument = _.find(versions, function(d) {
              return d.version === nextVersion;
            });
            return deferred.resolve(nextVersionDocument);
          });
          return deferred.promise;
        },
        hasPreviousVersion: function(document) {
          var deferred;
          deferred = $q.defer();
          this.getPreviousVersion(document).then(function(doc) {
            return deferred.resolve(doc != null);
          });
          return deferred.promise;
        },
        hasNextVersion: function(document) {
          var deferred;
          deferred = $q.defer();
          this.getNextVersion(document).then(function(doc) {
            return deferred.resolve(doc != null);
          });
          return deferred.promise;
        },
        saveDocument: function(doc) {
          if (doc._id != null) {
            return $http.put("/documents/" + doc._id, doc);
          } else {
            return $http.put("/documents/", doc);
          }
        },
        deleteDocument: function(doc) {
          return $http["delete"]("/documents/" + doc._id);
        }
      };
      return self;
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,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Q2YsY0FBQSxRQUFBO0FBQUEsVUFBQSxRQUFBLEdBQVcsRUFBRSxDQUFDLEtBQUgsQ0FBQSxDQUFYLENBQUE7QUFBQSxVQUNBLElBQUMsQ0FBQSxjQUFELENBQWdCLFFBQWhCLENBQXlCLENBQUMsSUFBMUIsQ0FBK0IsU0FBQyxHQUFELEdBQUE7bUJBQzlCLFFBQVEsQ0FBQyxPQUFULENBQWlCLFdBQWpCLEVBRDhCO1VBQUEsQ0FBL0IsQ0FEQSxDQUFBO2lCQUdBLFFBQVEsQ0FBQyxRQUpNO1FBQUEsQ0EvQ2hCO0FBQUEsUUFxREEsWUFBQSxFQUFjLFNBQUMsR0FBRCxHQUFBO0FBQ2IsVUFBQSxJQUFHLGVBQUg7bUJBQ0MsS0FBSyxDQUFDLEdBQU4sQ0FBVSxhQUFBLEdBQWMsR0FBRyxDQUFDLEdBQTVCLEVBQW1DLEdBQW5DLEVBREQ7V0FBQSxNQUFBO21CQUdDLEtBQUssQ0FBQyxHQUFOLENBQVUsYUFBVixFQUF5QixHQUF6QixFQUhEO1dBRGE7UUFBQSxDQXJEZDtBQUFBLFFBMkRBLGNBQUEsRUFBZ0IsU0FBQyxHQUFELEdBQUE7aUJBQ2YsS0FBSyxDQUFDLFFBQUQsQ0FBTCxDQUFhLGFBQUEsR0FBYyxHQUFHLENBQUMsR0FBL0IsRUFEZTtRQUFBLENBM0RoQjtPQURELENBQUE7YUErREEsS0FqRUQ7SUFBQSxDQUx3RDtHQUF6RCxDQUFBLENBQUE7QUFBQSIsImZpbGUiOiJzZXJ2aWNlcy9kYXRhLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ21vZWRpdC5TZXJ2aWNlcycpLmZhY3RvcnkgJ21vZWRpdC5EYXRhJywgWyBcblx0JyRyb290U2NvcGUnXG5cdCckbG9nJ1xuXHQnJGh0dHAnXG5cdCckcSdcblx0KCRyb290U2NvcGUsICRsb2csICRodHRwLCAkcSkgLT5cblxuXHRcdHNlbGYgPVxuXHRcdFx0ZG9jdW1lbnRzOiAtPlxuXHRcdFx0XHRkZWZlcnJlZCA9ICRxLmRlZmVyKClcblx0XHRcdFx0JGh0dHAuZ2V0KCcvZG9jdW1lbnRzJykudGhlbiAocmVzcG9uc2UpIC0+XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZSByZXNwb25zZS5kYXRhXG5cdFx0XHRcdGRlZmVycmVkLnByb21pc2Vcblx0XHRcdFxuXHRcdFx0ZG9jdW1lbnQ6IChkb2NpZCkgLT5cblx0XHRcdFx0ZGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cdFx0XHRcdCRodHRwLmdldChcIi9kb2N1bWVudHMvI3tkb2NpZH1cIikudGhlbiAocmVzcG9uc2UpIC0+XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZSByZXNwb25zZS5kYXRhXG5cdFx0XHRcdGRlZmVycmVkLnByb21pc2Vcblx0XHRcdFxuXHRcdFx0ZG9jdW1lbnRWZXJzaW9uczogKGRvY0tleSkgLT5cblx0XHRcdFx0ZGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cdFx0XHRcdCMgVE9ETzogbWFrZSB0aGlzIG1vcmUgc21hcnRcblx0XHRcdFx0QGRvY3VtZW50cygpLnRoZW4gKGRvY3VtZW50cykgLT5cblx0XHRcdFx0XHRkb2NzV2l0aEtleSA9IF8uZmlsdGVyIGRvY3VtZW50cywgKGQpIC0+IGQua2V5ID09IGRvY0tleVxuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUgZG9jc1dpdGhLZXlcblx0XHRcdFx0ZGVmZXJyZWQucHJvbWlzZVxuXG5cdFx0XHRnZXRQcmV2aW91c1ZlcnNpb246IChkb2N1bWVudCkgLT5cblx0XHRcdFx0ZGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cdFx0XHRcdEBkb2N1bWVudFZlcnNpb25zKGRvY3VtZW50LmtleSkudGhlbiAodmVyc2lvbnMpIC0+XG5cdFx0XHRcdFx0cHJldmlvdXNWZXJzaW9uID0gZG9jdW1lbnQudmVyc2lvbiAtIDEgXG5cdFx0XHRcdFx0Y29uc29sZS5cdGxvZyBcInB2OiAje3ByZXZpb3VzVmVyc2lvbn1cIlxuXHRcdFx0XHRcdGlmIHByZXZpb3VzVmVyc2lvbiA8IDBcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUgbnVsbFxuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHByZXZpb3VzVmVyc2lvbkRvY3VtZW50ID0gXy5maW5kIHZlcnNpb25zLCAoZCkgLT4gZC52ZXJzaW9uID09IHByZXZpb3VzVmVyc2lvblxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZSBwcmV2aW91c1ZlcnNpb25Eb2N1bWVudFxuXHRcdFx0XHRkZWZlcnJlZC5wcm9taXNlXG5cblx0XHRcdGdldE5leHRWZXJzaW9uOiAoZG9jdW1lbnQpIC0+XG5cdFx0XHRcdGRlZmVycmVkID0gJHEuZGVmZXIoKVxuXHRcdFx0XHRAZG9jdW1lbnRWZXJzaW9ucyhkb2N1bWVudC5rZXkpLnRoZW4gKHZlcnNpb25zKSAtPlxuXHRcdFx0XHRcdG5leHRWZXJzaW9uID0gZG9jdW1lbnQudmVyc2lvbiArIDFcblx0XHRcdFx0XHRjb25zb2xlLmxvZyBcIm52OiAje25leHRWZXJzaW9ufVwiXG5cdFx0XHRcdFx0bmV4dFZlcnNpb25Eb2N1bWVudCA9IF8uZmluZCB2ZXJzaW9ucywgKGQpIC0+IGQudmVyc2lvbiA9PSBuZXh0VmVyc2lvblxuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUgbmV4dFZlcnNpb25Eb2N1bWVudFxuXHRcdFx0XHRkZWZlcnJlZC5wcm9taXNlXG5cblx0XHRcdGhhc1ByZXZpb3VzVmVyc2lvbjogKGRvY3VtZW50KSAtPlxuXHRcdFx0XHRkZWZlcnJlZCA9ICRxLmRlZmVyKClcblx0XHRcdFx0QGdldFByZXZpb3VzVmVyc2lvbihkb2N1bWVudCkudGhlbiAoZG9jKSAtPlxuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUgZG9jP1xuXHRcdFx0XHRkZWZlcnJlZC5wcm9taXNlXG5cblx0XHRcdGhhc05leHRWZXJzaW9uOiAoZG9jdW1lbnQpIC0+XG5cdFx0XHRcdGRlZmVycmVkID0gJHEuZGVmZXIoKVxuXHRcdFx0XHRAZ2V0TmV4dFZlcnNpb24oZG9jdW1lbnQpLnRoZW4gKGRvYykgLT5cblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlIGRvYz9cblx0XHRcdFx0ZGVmZXJyZWQucHJvbWlzZVxuXG5cdFx0XHRzYXZlRG9jdW1lbnQ6IChkb2MpIC0+XG5cdFx0XHRcdGlmIGRvYy5faWQ/XG5cdFx0XHRcdFx0JGh0dHAucHV0IFwiL2RvY3VtZW50cy8je2RvYy5faWR9XCIsIGRvY1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0JGh0dHAucHV0IFwiL2RvY3VtZW50cy9cIiwgZG9jXG5cblx0XHRcdGRlbGV0ZURvY3VtZW50OiAoZG9jKSAtPlxuXHRcdFx0XHQkaHR0cC5kZWxldGUgXCIvZG9jdW1lbnRzLyN7ZG9jLl9pZH1cIlxuXG5cdFx0c2VsZlxuXSJdfQ==