(function() {
  var app;

  app = angular.module('moedit.App');

  app.config([
    '$stateProvider', '$urlRouterProvider', '$locationProvider', function($stateProvider, $urlRouterProvider, $locationProvider) {
      $stateProvider.state('login', {
        url: "/login",
        templateUrl: 'partials/login.html',
        controller: 'loginController'
      }).state('logout', {
        url: "/logout"
      }).state('edit', {
        url: "/edit/:docid",
        templateUrl: 'partials/edit.html',
        controller: 'editController'
      }).state('list', {
        url: "/list",
        templateUrl: 'partials/list.html',
        controller: 'listController'
      }).state('diff', {
        url: "/diff/:docKey/:leftVersion/:rightVersion",
        templateUrl: 'partials/diff.html',
        controller: 'diffController'
      });
      $urlRouterProvider.otherwise('/list');
      return $locationProvider.html5Mode(true);
    }
  ]);

  app.run([
    '$rootScope', '$state', '$log', 'moedit.Auth', function($rootScope, $state, $log, Auth) {
      return $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
        $rootScope.showFullscreen = toState.name === 'edit';
        $log.info("statechange from: " + fromState.name + " to: " + toState.name + ", showFullscreen: " + $rootScope.showFullscreen);
        return;
        if (toState.name !== 'login') {
          if (!Auth.isLoggedIn()) {
            $log.info("not logged in for that state. goto login.");
            event.preventDefault();
            $state.go('login');
          }
          if (toState.name === 'logout') {
            $log.info("logout and goto login");
            Auth.logout();
            event.preventDefault();
            return $state.go('login');
          }
        }
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LENBQXBDLEVBRHVEO0lBQUEsQ0FBaEQ7R0FBUixDQXBDQSxDQUFBO0FBQUEiLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYXBwID0gYW5ndWxhci5tb2R1bGUoJ21vZWRpdC5BcHAnKVxuXG4jIHJvdXRlc1xuYXBwLmNvbmZpZyBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikgLT5cblxuXHQkc3RhdGVQcm92aWRlclxuXHRcdC5zdGF0ZSAnbG9naW4nLFxuXHRcdFx0dXJsOiBcIi9sb2dpblwiXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2xvZ2luLmh0bWwnXG5cdFx0XHRjb250cm9sbGVyOiAnbG9naW5Db250cm9sbGVyJ1xuXHRcdFxuXHRcdC5zdGF0ZSAnbG9nb3V0Jyxcblx0XHRcdHVybDogXCIvbG9nb3V0XCJcblxuXHRcdC5zdGF0ZSAnZWRpdCcsXG5cdFx0XHR1cmw6IFwiL2VkaXQvOmRvY2lkXCJcblx0XHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvZWRpdC5odG1sJ1xuXHRcdFx0Y29udHJvbGxlcjogJ2VkaXRDb250cm9sbGVyJ1xuXG5cdFx0LnN0YXRlICdsaXN0Jyxcblx0XHRcdHVybDogXCIvbGlzdFwiXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2xpc3QuaHRtbCdcblx0XHRcdGNvbnRyb2xsZXI6ICdsaXN0Q29udHJvbGxlcidcblxuXHRcdC5zdGF0ZSAnZGlmZicsXG5cdFx0XHR1cmw6IFwiL2RpZmYvOmRvY0tleS86bGVmdFZlcnNpb24vOnJpZ2h0VmVyc2lvblwiXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2RpZmYuaHRtbCdcblx0XHRcdGNvbnRyb2xsZXI6ICdkaWZmQ29udHJvbGxlcidcblxuXG5cdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9saXN0Jyk7XG5cblx0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpXG5dXG5cbiMgdGFrZSBub3QgbG9nZ2VkIGluIHVzZXIgdG8gbG9naW5cbmFwcC5ydW4gWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICckbG9nJywgJ21vZWRpdC5BdXRoJywgKCRyb290U2NvcGUsICRzdGF0ZSwgJGxvZywgQXV0aCkgLT5cblx0JHJvb3RTY29wZS4kb24gXCIkc3RhdGVDaGFuZ2VTdGFydFwiLCAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIC0+XG5cdFx0JHJvb3RTY29wZS5zaG93RnVsbHNjcmVlbiA9IHRvU3RhdGUubmFtZSA9PSAnZWRpdCdcblx0XHQkbG9nLmluZm8gXCJzdGF0ZWNoYW5nZSBmcm9tOiAje2Zyb21TdGF0ZS5uYW1lfSB0bzogI3t0b1N0YXRlLm5hbWV9LCBzaG93RnVsbHNjcmVlbjogI3skcm9vdFNjb3BlLnNob3dGdWxsc2NyZWVufVwiXG5cdFx0cmV0dXJuXG5cdFx0aWYgdG9TdGF0ZS5uYW1lICE9ICdsb2dpbidcblx0XHRcdGlmICFBdXRoLmlzTG9nZ2VkSW4oKVxuXHRcdFx0XHQkbG9nLmluZm8gXCJub3QgbG9nZ2VkIGluIGZvciB0aGF0IHN0YXRlLiBnb3RvIGxvZ2luLlwiXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRcdFx0JHN0YXRlLmdvICdsb2dpbidcblxuXHRcdFx0aWYgdG9TdGF0ZS5uYW1lID09ICdsb2dvdXQnXG5cdFx0XHRcdCRsb2cuaW5mbyBcImxvZ291dCBhbmQgZ290byBsb2dpblwiXG5cdFx0XHRcdEF1dGgubG9nb3V0KClcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdFx0XHQkc3RhdGUuZ28gJ2xvZ2luJ1xuXSJdfQ==