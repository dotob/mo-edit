(function() {
  var app;

  app = angular.module('moedit.App');

  app.config([
    '$stateProvider', '$urlRouterProvider', '$locationProvider', function($stateProvider, $urlRouterProvider, $locationProvider) {
      $stateProvider.state('login', {
        url: "/login",
        templateUrl: 'partials/login.html',
        controller: 'loginController'
      }).state('logout', {
        url: "/logout"
      }).state('edit', {
        url: "/edit/:docid",
        templateUrl: 'partials/edit.html',
        controller: 'editController'
      }).state('list', {
        url: "/list",
        templateUrl: 'partials/list.html',
        controller: 'listController'
      });
      $urlRouterProvider.otherwise('/list');
      return $locationProvider.html5Mode(true);
    }
  ]);

  app.run([
    '$rootScope', '$state', '$log', 'moedit.Auth', function($rootScope, $state, $log, Auth) {
      return $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
        $log.info("statechange from: " + fromState.name + " to: " + toState.name);
        return;
        if (toState.name !== 'login') {
          if (!Auth.isLoggedIn()) {
            $log.info("not logged in for that state. goto login.");
            event.preventDefault();
            $state.go('login');
          }
          if (toState.name === 'logout') {
            $log.info("logout and goto login");
            Auth.logout();
            event.preventDefault();
            return $state.go('login');
          }
        }
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEdBQUE7O0FBQUEsRUFBQSxHQUFBLEdBQU0sT0FBTyxDQUFDLE1BQVIsQ0FBZ0IsWUFBaEIsQ0FBTixDQUFBOztBQUFBLEVBR0EsR0FBRyxDQUFDLE1BQUosQ0FBVztJQUFFLGdCQUFGLEVBQW9CLG9CQUFwQixFQUEwQyxtQkFBMUMsRUFBOEQsU0FBQyxjQUFELEVBQWlCLGtCQUFqQixFQUFxQyxpQkFBckMsR0FBQTtBQUV4RSxNQUFBLGNBQ0MsQ0FBQyxLQURGLENBQ1MsT0FEVCxFQUVFO0FBQUEsUUFBQSxHQUFBLEVBQU0sUUFBTjtBQUFBLFFBQ0EsV0FBQSxFQUFjLHFCQURkO0FBQUEsUUFFQSxVQUFBLEVBQWEsaUJBRmI7T0FGRixDQU1DLENBQUMsS0FORixDQU1TLFFBTlQsRUFPRTtBQUFBLFFBQUEsR0FBQSxFQUFNLFNBQU47T0FQRixDQVNDLENBQUMsS0FURixDQVNTLE1BVFQsRUFVRTtBQUFBLFFBQUEsR0FBQSxFQUFNLGNBQU47QUFBQSxRQUNBLFdBQUEsRUFBYyxvQkFEZDtBQUFBLFFBRUEsVUFBQSxFQUFhLGdCQUZiO09BVkYsQ0FjQyxDQUFDLEtBZEYsQ0FjUyxNQWRULEVBZUU7QUFBQSxRQUFBLEdBQUEsRUFBTSxPQUFOO0FBQUEsUUFDQSxXQUFBLEVBQWMsb0JBRGQ7QUFBQSxRQUVBLFVBQUEsRUFBYSxnQkFGYjtPQWZGLENBQUEsQ0FBQTtBQUFBLE1Bb0JBLGtCQUFrQixDQUFDLFNBQW5CLENBQThCLE9BQTlCLENBcEJBLENBQUE7YUFzQkEsaUJBQWlCLENBQUMsU0FBbEIsQ0FBNEIsSUFBNUIsRUF4QndFO0lBQUEsQ0FBOUQ7R0FBWCxDQUhBLENBQUE7O0FBQUEsRUErQkEsR0FBRyxDQUFDLEdBQUosQ0FBUTtJQUFFLFlBQUYsRUFBZ0IsUUFBaEIsRUFBMEIsTUFBMUIsRUFBa0MsYUFBbEMsRUFBZ0QsU0FBQyxVQUFELEVBQWEsTUFBYixFQUFxQixJQUFyQixFQUEyQixJQUEzQixHQUFBO2FBQ3ZELFVBQVUsQ0FBQyxHQUFYLENBQWdCLG1CQUFoQixFQUFvQyxTQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLFFBQWpCLEVBQTJCLFNBQTNCLEVBQXNDLFVBQXRDLEdBQUE7QUFDbkMsUUFBQSxJQUFJLENBQUMsSUFBTCxDQUFXLG9CQUFBLEdBQW9CLFNBQVMsQ0FBQyxJQUE5QixHQUFtQyxPQUFuQyxHQUEwQyxPQUFPLENBQUMsSUFBN0QsQ0FBQSxDQUFBO0FBQ0EsY0FBQSxDQURBO0FBRUEsUUFBQSxJQUFHLE9BQU8sQ0FBQyxJQUFSLEtBQWlCLE9BQXBCO0FBQ0MsVUFBQSxJQUFHLENBQUEsSUFBSyxDQUFDLFVBQUwsQ0FBQSxDQUFKO0FBQ0MsWUFBQSxJQUFJLENBQUMsSUFBTCxDQUFXLDJDQUFYLENBQUEsQ0FBQTtBQUFBLFlBQ0EsS0FBSyxDQUFDLGNBQU4sQ0FBQSxDQURBLENBQUE7QUFBQSxZQUVBLE1BQU0sQ0FBQyxFQUFQLENBQVcsT0FBWCxDQUZBLENBREQ7V0FBQTtBQUtBLFVBQUEsSUFBRyxPQUFPLENBQUMsSUFBUixLQUFpQixRQUFwQjtBQUNDLFlBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVyx1QkFBWCxDQUFBLENBQUE7QUFBQSxZQUNBLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FEQSxDQUFBO0FBQUEsWUFFQSxLQUFLLENBQUMsY0FBTixDQUFBLENBRkEsQ0FBQTttQkFHQSxNQUFNLENBQUMsRUFBUCxDQUFXLE9BQVgsRUFKRDtXQU5EO1NBSG1DO01BQUEsQ0FBcEMsRUFEdUQ7SUFBQSxDQUFoRDtHQUFSLENBL0JBLENBQUE7QUFBQSIsImZpbGUiOiJyb3V0ZXMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbW9lZGl0LkFwcCcpXG5cbiMgcm91dGVzXG5hcHAuY29uZmlnIFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSAtPlxuXG5cdCRzdGF0ZVByb3ZpZGVyXG5cdFx0LnN0YXRlICdsb2dpbicsXG5cdFx0XHR1cmw6IFwiL2xvZ2luXCJcblx0XHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvbG9naW4uaHRtbCdcblx0XHRcdGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXInXG5cdFx0XG5cdFx0LnN0YXRlICdsb2dvdXQnLFxuXHRcdFx0dXJsOiBcIi9sb2dvdXRcIlxuXG5cdFx0LnN0YXRlICdlZGl0Jyxcblx0XHRcdHVybDogXCIvZWRpdC86ZG9jaWRcIlxuXHRcdFx0dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9lZGl0Lmh0bWwnXG5cdFx0XHRjb250cm9sbGVyOiAnZWRpdENvbnRyb2xsZXInXG5cblx0XHQuc3RhdGUgJ2xpc3QnLFxuXHRcdFx0dXJsOiBcIi9saXN0XCJcblx0XHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvbGlzdC5odG1sJ1xuXHRcdFx0Y29udHJvbGxlcjogJ2xpc3RDb250cm9sbGVyJ1xuXG5cblx0JHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2xpc3QnKTtcblxuXHQkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSlcbl1cblxuIyB0YWtlIG5vdCBsb2dnZWQgaW4gdXNlciB0byBsb2dpblxuYXBwLnJ1biBbJyRyb290U2NvcGUnLCAnJHN0YXRlJywgJyRsb2cnLCAnbW9lZGl0LkF1dGgnLCAoJHJvb3RTY29wZSwgJHN0YXRlLCAkbG9nLCBBdXRoKSAtPlxuXHQkcm9vdFNjb3BlLiRvbiBcIiRzdGF0ZUNoYW5nZVN0YXJ0XCIsIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykgLT5cblx0XHQkbG9nLmluZm8gXCJzdGF0ZWNoYW5nZSBmcm9tOiAje2Zyb21TdGF0ZS5uYW1lfSB0bzogI3t0b1N0YXRlLm5hbWV9XCJcblx0XHRyZXR1cm5cblx0XHRpZiB0b1N0YXRlLm5hbWUgIT0gJ2xvZ2luJ1xuXHRcdFx0aWYgIUF1dGguaXNMb2dnZWRJbigpXG5cdFx0XHRcdCRsb2cuaW5mbyBcIm5vdCBsb2dnZWQgaW4gZm9yIHRoYXQgc3RhdGUuIGdvdG8gbG9naW4uXCJcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdFx0XHQkc3RhdGUuZ28gJ2xvZ2luJ1xuXG5cdFx0XHRpZiB0b1N0YXRlLm5hbWUgPT0gJ2xvZ291dCdcblx0XHRcdFx0JGxvZy5pbmZvIFwibG9nb3V0IGFuZCBnb3RvIGxvZ2luXCJcblx0XHRcdFx0QXV0aC5sb2dvdXQoKVxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0XHRcdCRzdGF0ZS5nbyAnbG9naW4nXG5dIl19