(function() {
  var app;

  app = angular.module('moedit.App');

  app.config([
    '$stateProvider', '$urlRouterProvider', '$locationProvider', function($stateProvider, $urlRouterProvider, $locationProvider) {
      $stateProvider.state('login', {
        url: "/login",
        templateUrl: 'partials/login.html',
        controller: 'loginController'
      }).state('logout', {
        url: "/logout"
      }).state('edit', {
        url: "/edit",
        templateUrl: 'partials/edit.html',
        controller: 'editController'
      });
      $urlRouterProvider.otherwise('/login');
      return $locationProvider.html5Mode(true);
    }
  ]);

  app.run([
    '$rootScope', '$state', '$log', 'moedit.Auth', function($rootScope, $state, $log, Auth) {
      return $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
        $log.info("statechange from: " + fromState.name + " to: " + toState.name);
        return;
        if (toState.name !== 'login') {
          if (!Auth.isLoggedIn()) {
            $log.info("not logged in for that state. goto login.");
            event.preventDefault();
            $state.go('login');
          }
          if (toState.name === 'logout') {
            $log.info("logout and goto login");
            Auth.logout();
            event.preventDefault();
            return $state.go('login');
          }
        }
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEdBQUE7O0FBQUEsRUFBQSxHQUFBLEdBQU0sT0FBTyxDQUFDLE1BQVIsQ0FBZ0IsWUFBaEIsQ0FBTixDQUFBOztBQUFBLEVBR0EsR0FBRyxDQUFDLE1BQUosQ0FBVztJQUFFLGdCQUFGLEVBQW9CLG9CQUFwQixFQUEwQyxtQkFBMUMsRUFBOEQsU0FBQyxjQUFELEVBQWlCLGtCQUFqQixFQUFxQyxpQkFBckMsR0FBQTtBQUV4RSxNQUFBLGNBQ0MsQ0FBQyxLQURGLENBQ1MsT0FEVCxFQUVFO0FBQUEsUUFBQSxHQUFBLEVBQU0sUUFBTjtBQUFBLFFBQ0EsV0FBQSxFQUFjLHFCQURkO0FBQUEsUUFFQSxVQUFBLEVBQWEsaUJBRmI7T0FGRixDQU1DLENBQUMsS0FORixDQU1TLFFBTlQsRUFPRTtBQUFBLFFBQUEsR0FBQSxFQUFNLFNBQU47T0FQRixDQVNDLENBQUMsS0FURixDQVNTLE1BVFQsRUFVRTtBQUFBLFFBQUEsR0FBQSxFQUFNLE9BQU47QUFBQSxRQUNBLFdBQUEsRUFBYyxvQkFEZDtBQUFBLFFBRUEsVUFBQSxFQUFhLGdCQUZiO09BVkYsQ0FBQSxDQUFBO0FBQUEsTUFlQSxrQkFBa0IsQ0FBQyxTQUFuQixDQUE4QixRQUE5QixDQWZBLENBQUE7YUFpQkEsaUJBQWlCLENBQUMsU0FBbEIsQ0FBNEIsSUFBNUIsRUFuQndFO0lBQUEsQ0FBOUQ7R0FBWCxDQUhBLENBQUE7O0FBQUEsRUEwQkEsR0FBRyxDQUFDLEdBQUosQ0FBUTtJQUFFLFlBQUYsRUFBZ0IsUUFBaEIsRUFBMEIsTUFBMUIsRUFBa0MsYUFBbEMsRUFBZ0QsU0FBQyxVQUFELEVBQWEsTUFBYixFQUFxQixJQUFyQixFQUEyQixJQUEzQixHQUFBO2FBQ3ZELFVBQVUsQ0FBQyxHQUFYLENBQWdCLG1CQUFoQixFQUFvQyxTQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLFFBQWpCLEVBQTJCLFNBQTNCLEVBQXNDLFVBQXRDLEdBQUE7QUFDbkMsUUFBQSxJQUFJLENBQUMsSUFBTCxDQUFXLG9CQUFBLEdBQW9CLFNBQVMsQ0FBQyxJQUE5QixHQUFtQyxPQUFuQyxHQUEwQyxPQUFPLENBQUMsSUFBN0QsQ0FBQSxDQUFBO0FBQ0EsY0FBQSxDQURBO0FBRUEsUUFBQSxJQUFHLE9BQU8sQ0FBQyxJQUFSLEtBQWlCLE9BQXBCO0FBQ0MsVUFBQSxJQUFHLENBQUEsSUFBSyxDQUFDLFVBQUwsQ0FBQSxDQUFKO0FBQ0MsWUFBQSxJQUFJLENBQUMsSUFBTCxDQUFXLDJDQUFYLENBQUEsQ0FBQTtBQUFBLFlBQ0EsS0FBSyxDQUFDLGNBQU4sQ0FBQSxDQURBLENBQUE7QUFBQSxZQUVBLE1BQU0sQ0FBQyxFQUFQLENBQVcsT0FBWCxDQUZBLENBREQ7V0FBQTtBQUtBLFVBQUEsSUFBRyxPQUFPLENBQUMsSUFBUixLQUFpQixRQUFwQjtBQUNDLFlBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVyx1QkFBWCxDQUFBLENBQUE7QUFBQSxZQUNBLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FEQSxDQUFBO0FBQUEsWUFFQSxLQUFLLENBQUMsY0FBTixDQUFBLENBRkEsQ0FBQTttQkFHQSxNQUFNLENBQUMsRUFBUCxDQUFXLE9BQVgsRUFKRDtXQU5EO1NBSG1DO01BQUEsQ0FBcEMsRUFEdUQ7SUFBQSxDQUFoRDtHQUFSLENBMUJBLENBQUE7QUFBQSIsImZpbGUiOiJyb3V0ZXMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbW9lZGl0LkFwcCcpXG5cbiMgcm91dGVzXG5hcHAuY29uZmlnIFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSAtPlxuXG5cdCRzdGF0ZVByb3ZpZGVyXG5cdFx0LnN0YXRlICdsb2dpbicsXG5cdFx0XHR1cmw6IFwiL2xvZ2luXCJcblx0XHRcdHRlbXBsYXRlVXJsOiAncGFydGlhbHMvbG9naW4uaHRtbCdcblx0XHRcdGNvbnRyb2xsZXI6ICdsb2dpbkNvbnRyb2xsZXInXG5cdFx0XG5cdFx0LnN0YXRlICdsb2dvdXQnLFxuXHRcdFx0dXJsOiBcIi9sb2dvdXRcIlxuXG5cdFx0LnN0YXRlICdlZGl0Jyxcblx0XHRcdHVybDogXCIvZWRpdFwiXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2VkaXQuaHRtbCdcblx0XHRcdGNvbnRyb2xsZXI6ICdlZGl0Q29udHJvbGxlcidcblxuXG5cdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9sb2dpbicpO1xuXG5cdCRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKVxuXVxuXG4jIHRha2Ugbm90IGxvZ2dlZCBpbiB1c2VyIHRvIGxvZ2luXG5hcHAucnVuIFsnJHJvb3RTY29wZScsICckc3RhdGUnLCAnJGxvZycsICdtb2VkaXQuQXV0aCcsICgkcm9vdFNjb3BlLCAkc3RhdGUsICRsb2csIEF1dGgpIC0+XG5cdCRyb290U2NvcGUuJG9uIFwiJHN0YXRlQ2hhbmdlU3RhcnRcIiwgKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSAtPlxuXHRcdCRsb2cuaW5mbyBcInN0YXRlY2hhbmdlIGZyb206ICN7ZnJvbVN0YXRlLm5hbWV9IHRvOiAje3RvU3RhdGUubmFtZX1cIlxuXHRcdHJldHVyblxuXHRcdGlmIHRvU3RhdGUubmFtZSAhPSAnbG9naW4nXG5cdFx0XHRpZiAhQXV0aC5pc0xvZ2dlZEluKClcblx0XHRcdFx0JGxvZy5pbmZvIFwibm90IGxvZ2dlZCBpbiBmb3IgdGhhdCBzdGF0ZS4gZ290byBsb2dpbi5cIlxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0XHRcdCRzdGF0ZS5nbyAnbG9naW4nXG5cblx0XHRcdGlmIHRvU3RhdGUubmFtZSA9PSAnbG9nb3V0J1xuXHRcdFx0XHQkbG9nLmluZm8gXCJsb2dvdXQgYW5kIGdvdG8gbG9naW5cIlxuXHRcdFx0XHRBdXRoLmxvZ291dCgpXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRcdFx0JHN0YXRlLmdvICdsb2dpbidcbl0iXX0=