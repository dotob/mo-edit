(function() {
  var controllers;

  controllers = angular.module('moedit.Controllers');

  controllers.controller('editController', [
    '$scope', '$log', '$q', '$state', '$stateParams', '$window', 'moedit.Socket', 'moedit.SweetAlert', 'moedit.Focus', 'moedit.Data', 'messageCenterService', function($scope, $log, $q, $state, $stateParams, $window, Socket, SweetAlert, Focus, Data, messageCenterService) {
      var autoSave, autoSaveCurrentDocument, chapterchange;
      autoSaveCurrentDocument = function() {
        $log.debug("autosave");
        return $scope.saveDocument($scope.currentDocument, "Automatisch gespeichert");
      };
      autoSave = _.debounce(autoSaveCurrentDocument, 5000);
      $scope.selectChapter = function(chapter) {
        var c, i, len, ref;
        if ($scope.chapterWatch != null) {
          $scope.chapterWatch();
        }
        $log.info("select chapter " + chapter.title + ":" + chapter.selected);
        $scope.currentChapter = chapter;
        ref = $scope.currentDocument.chapters;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          if (c._id === chapter._id) {
            c.selected = true;
          } else {
            c.selected = false;
          }
        }
        return $scope.chapterWatch = $scope.$watch('currentChapter.content', chapterchange, true);
      };
      chapterchange = function(newValue, oldValue) {
        $log.debug("changed");
        if (newValue !== oldValue) {
          $scope.currentChapter.lastChanged = new Date();
          return autoSave();
        }
      };
      $scope.newComment = function(chapter) {
        chapter.comments.push({
          author: chance.name(),
          text: $scope.newCommentText,
          created: new Date()
        });
        $scope.newCommentText = '';
        return autoSave();
      };
      $scope.newChapter = function(document) {
        document.chapters.push({
          title: $scope.newChapterTitle,
          author: chance.name(),
          lastChanged: new Date(),
          state: 'ONGOING',
          comments: [],
          version: 1
        });
        $scope.newChapterTitle = '';
        $scope.selectChapter(_.last(document.chapters));
        return autoSave();
      };
      $scope.saveDocument = function(document, msg) {
        if (msg == null) {
          msg = "Gutachten erfolgreich gespeichert";
        }
        return Data.saveDocument(document).then(function(response) {
          if (response.status !== 200) {
            return messageCenterService.add('danger', msg, {
              html: true
            });
          } else {
            return messageCenterService.add('success', msg, {
              timeout: 2000,
              html: true
            });
          }
        });
      };
      $scope.docStateChanged = function(val) {
        return console.log($scope.currentDocument.state);
      };
      if ($stateParams.docid) {
        return Data.document($stateParams.docid).then(function(document) {
          console.dir(document);
          $scope.currentDocument = document;
          return $scope.selectChapter($scope.currentDocument.chapters[0]);
        });
      } else {
        return $state.go('list');
      }
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2VkaXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxXQUFBOztBQUFBLEVBQUEsV0FBQSxHQUFjLE9BQU8sQ0FBQyxNQUFSLENBQWUsb0JBQWYsQ0FBZCxDQUFBOztBQUFBLEVBQ0EsV0FBVyxDQUFDLFVBQVosQ0FBdUIsZ0JBQXZCLEVBQXlDO0lBQ3hDLFFBRHdDLEVBRXhDLE1BRndDLEVBR3hDLElBSHdDLEVBSXhDLFFBSndDLEVBS3hDLGNBTHdDLEVBTXhDLFNBTndDLEVBT3hDLGVBUHdDLEVBUXhDLG1CQVJ3QyxFQVN4QyxjQVR3QyxFQVV4QyxhQVZ3QyxFQVd4QyxzQkFYd0MsRUFZeEMsU0FBQyxNQUFELEVBQVMsSUFBVCxFQUFlLEVBQWYsRUFBbUIsTUFBbkIsRUFBMkIsWUFBM0IsRUFBeUMsT0FBekMsRUFBa0QsTUFBbEQsRUFBMEQsVUFBMUQsRUFBc0UsS0FBdEUsRUFBNkUsSUFBN0UsRUFBbUYsb0JBQW5GLEdBQUE7QUFHQyxVQUFBLGdEQUFBO0FBQUEsTUFBQSx1QkFBQSxHQUEwQixTQUFBLEdBQUE7QUFDekIsUUFBQSxJQUFJLENBQUMsS0FBTCxDQUFXLFVBQVgsQ0FBQSxDQUFBO2VBQ0EsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsTUFBTSxDQUFDLGVBQTNCLEVBQTRDLHlCQUE1QyxFQUZ5QjtNQUFBLENBQTFCLENBQUE7QUFBQSxNQUlBLFFBQUEsR0FBVyxDQUFDLENBQUMsUUFBRixDQUFXLHVCQUFYLEVBQW9DLElBQXBDLENBSlgsQ0FBQTtBQUFBLE1BTUEsTUFBTSxDQUFDLGFBQVAsR0FBdUIsU0FBQyxPQUFELEdBQUE7QUFDdEIsWUFBQSxjQUFBO0FBQUEsUUFBQSxJQUFHLDJCQUFIO0FBQ0MsVUFBQSxNQUFNLENBQUMsWUFBUCxDQUFBLENBQUEsQ0FERDtTQUFBO0FBQUEsUUFFQSxJQUFJLENBQUMsSUFBTCxDQUFVLGlCQUFBLEdBQWtCLE9BQU8sQ0FBQyxLQUExQixHQUFnQyxH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QUFBO0FBQUEsTUFtREEsTUFBTSxDQUFDLGVBQVAsR0FBeUIsU0FBQyxHQUFELEdBQUE7ZUFDeEIsT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQW5DLEVBRHdCO01BQUEsQ0FuRHpCLENBQUE7QUFzREEsTUFBQSxJQUFHLFlBQVksQ0FBQyxLQUFoQjtlQUNDLElBQUksQ0FBQyxRQUFMLENBQWMsWUFBWSxDQUFDLEtBQTNCLENBQWlDLENBQUMsSUFBbEMsQ0FBdUMsU0FBQyxRQUFELEdBQUE7QUFDdEMsVUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQVosQ0FBQSxDQUFBO0FBQUEsVUFDQSxNQUFNLENBQUMsZUFBUCxHQUF5QixRQUR6QixDQUFBO2lCQUVBLE1BQU0sQ0FBQyxhQUFQLENBQXFCLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBckQsRUFIc0M7UUFBQSxDQUF2QyxFQUREO09BQUEsTUFBQTtlQU1DLE1BQU0sQ0FBQyxFQUFQLENBQVUsTUFBVixFQU5EO09BekREO0lBQUEsQ0Fad0M7R0FBekMsQ0FEQSxDQUFBO0FBQUEiLCJmaWxlIjoiY29udHJvbGxlcnMvZWRpdC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ21vZWRpdC5Db250cm9sbGVycycpXG5jb250cm9sbGVycy5jb250cm9sbGVyICdlZGl0Q29udHJvbGxlcicsIFtcblx0JyRzY29wZSdcblx0JyRsb2cnXG5cdCckcSdcblx0JyRzdGF0ZSdcblx0JyRzdGF0ZVBhcmFtcydcblx0JyR3aW5kb3cnXG5cdCdtb2VkaXQuU29ja2V0J1xuXHQnbW9lZGl0LlN3ZWV0QWxlcnQnXG5cdCdtb2VkaXQuRm9jdXMnXG5cdCdtb2VkaXQuRGF0YSdcblx0J21lc3NhZ2VDZW50ZXJTZXJ2aWNlJ1xuXHQoJHNjb3BlLCAkbG9nLCAkcSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsICR3aW5kb3csIFNvY2tldCwgU3dlZXRBbGVydCwgRm9jdXMsIERhdGEsIG1lc3NhZ2VDZW50ZXJTZXJ2aWNlKSAtPlxuXG5cdFx0IyBhdXRvc2F2ZVxuXHRcdGF1dG9TYXZlQ3VycmVudERvY3VtZW50ID0gKCkgLT5cblx0XHRcdCRsb2cuZGVidWcgXCJhdXRvc2F2ZVwiXG5cdFx0XHQkc2NvcGUuc2F2ZURvY3VtZW50KCRzY29wZS5jdXJyZW50RG9jdW1lbnQsIFwiQXV0b21hdGlzY2ggZ2VzcGVpY2hlcnRcIilcblx0XHRcblx0XHRhdXRvU2F2ZSA9IF8uZGVib3VuY2UgYXV0b1NhdmVDdXJyZW50RG9jdW1lbnQsIDUwMDBcblxuXHRcdCRzY29wZS5zZWxlY3RDaGFwdGVyID0gKGNoYXB0ZXIpIC0+XG5cdFx0XHRpZiAkc2NvcGUuY2hhcHRlcldhdGNoP1xuXHRcdFx0XHQkc2NvcGUuY2hhcHRlcldhdGNoKCkgIyByZW1vdmUgd2F0Y2hcblx0XHRcdCRsb2cuaW5mbyBcInNlbGVjdCBjaGFwdGVyICN7Y2hhcHRlci50aXRsZX06I3tjaGFwdGVyLnNlbGVjdGVkfVwiXG5cdFx0XHQkc2NvcGUuY3VycmVudENoYXB0ZXIgPSBjaGFwdGVyXG5cdFx0XHRmb3IgYyBpbiAkc2NvcGUuY3VycmVudERvY3VtZW50LmNoYXB0ZXJzXG5cdFx0XHRcdGlmIGMuX2lkID09IGNoYXB0ZXIuX2lkXG5cdFx0XHRcdFx0Yy5zZWxlY3RlZCA9IHRydWVcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGMuc2VsZWN0ZWQgPSBmYWxzZVxuXHRcdFx0JHNjb3BlLmNoYXB0ZXJXYXRjaCA9ICRzY29wZS4kd2F0Y2ggJ2N1cnJlbnRDaGFwdGVyLmNvbnRlbnQnLCBjaGFwdGVyY2hhbmdlLCB0cnVlXG5cblx0XHRjaGFwdGVyY2hhbmdlID0gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgLT5cblx0XHRcdFx0JGxvZy5kZWJ1ZyBcImNoYW5nZWRcIlxuXHRcdFx0XHRpZiBuZXdWYWx1ZSAhPSBvbGRWYWx1ZVxuXHRcdFx0XHRcdCRzY29wZS5jdXJyZW50Q2hhcHRlci5sYXN0Q2hhbmdlZCA9IG5ldyBEYXRlKClcblx0XHRcdFx0XHRhdXRvU2F2ZSgpXG5cblx0XHQkc2NvcGUubmV3Q29tbWVudCA9IChjaGFwdGVyKSAtPlxuXHRcdFx0Y2hhcHRlci5jb21tZW50cy5wdXNoXG5cdFx0XHRcdGF1dGhvcjogY2hhbmNlLm5hbWUoKVxuXHRcdFx0XHR0ZXh0OiAkc2NvcGUubmV3Q29tbWVudFRleHRcblx0XHRcdFx0Y3JlYXRlZDogbmV3IERhdGUoKVxuXHRcdFx0JHNjb3BlLm5ld0NvbW1lbnRUZXh0ID0gJydcblx0XHRcdGF1dG9TYXZlKClcblxuXHRcdCRzY29wZS5uZXdDaGFwdGVyID0gKGRvY3VtZW50KSAtPlxuXHRcdFx0ZG9jdW1lbnQuY2hhcHRlcnMucHVzaFxuXHRcdFx0XHR0aXRsZTogJHNjb3BlLm5ld0NoYXB0ZXJUaXRsZVxuXHRcdFx0XHRhdXRob3I6IGNoYW5jZS5uYW1lKClcblx0XHRcdFx0bGFzdENoYW5nZWQ6IG5ldyBEYXRlKClcblx0XHRcdFx0c3RhdGU6ICdPTkdPSU5HJ1xuXHRcdFx0XHRjb21tZW50czogW11cblx0XHRcdFx0dmVyc2lvbjogMVxuXHRcdFx0JHNjb3BlLm5ld0NoYXB0ZXJUaXRsZSA9ICcnXG5cdFx0XHQkc2NvcGUuc2VsZWN0Q2hhcHRlcihfLmxhc3QgZG9jdW1lbnQuY2hhcHRlcnMpXG5cdFx0XHRhdXRvU2F2ZSgpXG5cblx0XHQkc2NvcGUuc2F2ZURvY3VtZW50ID0gKGRvY3VtZW50LCBtc2cgPSBcIkd1dGFjaHRlbiBlcmZvbGdyZWljaCBnZXNwZWljaGVydFwiKSAtPlxuXHRcdFx0RGF0YS5zYXZlRG9jdW1lbnQoZG9jdW1lbnQpLnRoZW4gKHJlc3BvbnNlKSAtPlxuXHRcdFx0XHRpZiByZXNwb25zZS5zdGF0dXMgIT0gMjAwXG5cdFx0XHRcdFx0bWVzc2FnZUNlbnRlclNlcnZpY2UuYWRkKCdkYW5nZXInLCBtc2csIHtodG1sOiB0cnVlfSk7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRtZXNzYWdlQ2VudGVyU2VydmljZS5hZGQoJ3N1Y2Nlc3MnLCBtc2csIHt0aW1lb3V0OiAyMDAwLCBodG1sOiB0cnVlfSk7XG5cblx0XHQkc2NvcGUuZG9jU3RhdGVDaGFuZ2VkID0gKHZhbCkgLT5cblx0XHRcdGNvbnNvbGUubG9nICRzY29wZS5jdXJyZW50RG9jdW1lbnQuc3RhdGVcblxuXHRcdGlmICRzdGF0ZVBhcmFtcy5kb2NpZFxuXHRcdFx0RGF0YS5kb2N1bWVudCgkc3RhdGVQYXJhbXMuZG9jaWQpLnRoZW4gKGRvY3VtZW50KSAtPlxuXHRcdFx0XHRjb25zb2xlLmRpciBkb2N1bWVudFxuXHRcdFx0XHQkc2NvcGUuY3VycmVudERvY3VtZW50ID0gZG9jdW1lbnRcblx0XHRcdFx0JHNjb3BlLnNlbGVjdENoYXB0ZXIoJHNjb3BlLmN1cnJlbnREb2N1bWVudC5jaGFwdGVyc1swXSlcblx0XHRlbHNlXG5cdFx0XHQkc3RhdGUuZ28gJ2xpc3QnXG5dXG4iXX0=