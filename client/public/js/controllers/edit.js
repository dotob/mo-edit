(function() {
  var controllers;

  controllers = angular.module('moedit.Controllers');

  controllers.controller('editController', [
    '$scope', '$log', '$q', '$state', '$stateParams', '$window', 'moedit.Socket', 'moedit.SweetAlert', 'moedit.Focus', 'moedit.Data', 'messageCenterService', 'ngDialog', function($scope, $log, $q, $state, $stateParams, $window, Socket, SweetAlert, Focus, Data, messageCenterService, ngDialog) {
      var autoSave, autoSaveCurrentDocument, chapterchange, highlightComment, unhighlightAllComments, unhighlightComment, unselectComments;
      autoSaveCurrentDocument = function() {
        $log.debug("autosave");
        return $scope.saveDocument($scope.currentDocument, "Automatisch gespeichert");
      };
      autoSave = _.debounce(autoSaveCurrentDocument, 5000);
      $scope.selectChapter = function(chapter) {
        var c, i, len, ref;
        $log.info("select chapter " + chapter.title + ":" + chapter.selected);
        unhighlightAllComments();
        unselectComments();
        if ($scope.chapterWatch != null) {
          $scope.chapterWatch();
        }
        $scope.currentChapter = chapter;
        ref = $scope.currentDocument.chapters;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          if (c._id === chapter._id) {
            c.selected = true;
          } else {
            c.selected = false;
          }
        }
        return $scope.chapterWatch = $scope.$watch('currentChapter.content', chapterchange, true);
      };
      $scope.selectComment = function(comment) {
        var c, i, len, ref;
        unhighlightComment($scope.currentComment);
        $log.info("select comment: " + comment.text + ":" + comment.selected + ":" + comment.key);
        $scope.currentComment = comment;
        ref = $scope.currentChapter.comments;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          if (c.key === comment.key) {
            c.selected = true;
          } else {
            c.selected = false;
          }
        }
        highlightComment($scope.currentComment);
        return true;
      };
      unselectComments = function() {
        var c, i, len, ref, ref1, results;
        if (((ref = $scope.currentChapter) != null ? ref.comments : void 0) != null) {
          ref1 = $scope.currentChapter.comments;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            c = ref1[i];
            results.push(c.selected = false);
          }
          return results;
        }
      };
      highlightComment = function(comment) {
        if (comment != null) {
          return $("#" + comment.key).addClass('comment-highlight');
        }
      };
      unhighlightComment = function(comment) {
        if (comment != null) {
          return $("#" + comment.key).removeClass('comment-highlight');
        }
      };
      unhighlightAllComments = function() {
        return $(".comment").removeClass('comment-highlight');
      };
      chapterchange = function(newValue, oldValue) {
        var comment, i, j, len, len1, r, ref, removeMe;
        $log.debug("changed:: " + $scope.currentChapter.content);
        if (newValue !== oldValue) {
          $scope.currentChapter.lastChanged = new Date();
          if ($scope.commentRemoval) {
            removeMe = [];
            ref = $scope.currentChapter.comments;
            for (i = 0, len = ref.length; i < len; i++) {
              comment = ref[i];
              if (newValue.indexOf(comment.key) < 0) {
                removeMe.push(comment);
              }
            }
            for (j = 0, len1 = removeMe.length; j < len1; j++) {
              r = removeMe[j];
              $scope.deleteComment(r);
            }
            return autoSave();
          }
        }
      };
      $scope.newComment = function(chapter, commentKey) {
        var dialog;
        dialog = ngDialog.open({
          template: 'comment-input-dialog',
          scope: $scope
        });
        return dialog.closePromise.then(function(dialogData) {
          var comment;
          console.log("key: " + commentKey + ", text: " + dialogData.value);
          comment = {
            author: chance.name(),
            key: commentKey,
            created: new Date(),
            text: dialogData.value
          };
          chapter.lastChanged = new Date();
          chapter.comments.push(comment);
          $scope.selectComment(comment);
          return autoSave();
        });
      };
      $scope.newChapter = function(document) {
        document.chapters.push({
          title: $scope.newChapterTitle,
          author: chance.name(),
          lastChanged: new Date(),
          state: 'ONGOING',
          comments: [],
          version: 1
        });
        $scope.newChapterTitle = '';
        $scope.selectChapter(_.last(document.chapters));
        return autoSave();
      };
      $scope.saveDocument = function(document, msg) {
        if (msg == null) {
          msg = "Gutachten erfolgreich gespeichert";
        }
        return Data.saveDocument(document).then(function(response) {
          if (response.status !== 200) {
            return messageCenterService.add('danger', msg, {
              html: true
            });
          } else {
            return messageCenterService.add('success', msg, {
              timeout: 2000,
              html: true
            });
          }
        });
      };
      $scope.docStateChanged = function(val) {
        return console.log($scope.currentDocument.state);
      };
      $scope.deleteComment = function(comment) {
        var m, r, rgx;
        unhighlightComment(comment);
        rgx = "<span id=\"" + comment.key + "\" class=\".*?\">(.*?)<\/span>";
        console.log("rgx: " + rgx);
        r = new RegExp(rgx);
        console.log("before: " + $scope.currentChapter.content);
        m = $scope.currentChapter.content.match(r);
        console.dir(m);
        $scope.currentChapter.content = $scope.currentChapter.content.replace(r, m[1], 'g');
        console.log("after : " + $scope.currentChapter.content);
        _.remove($scope.currentChapter.comments, function(c) {
          return c.key === comment.key;
        });
        return autoSave();
      };
      $scope.editComment = function(comment) {
        var dialog;
        $scope.newCommentText = comment.text;
        dialog = ngDialog.open({
          template: 'comment-input-dialog',
          scope: $scope
        });
        return dialog.closePromise.then(function(dialogData) {
          console.log("key: " + comment.key + ", text: " + dialogData.value);
          comment.text = dialogData.value;
          return autoSave();
        });
      };
      $scope.newVersion = function(document) {
        var newDoc;
        newDoc = angular.copy(document);
        delete newDoc._id;
        newDoc.version++;
        return $scope.saveDocument(newDoc, "Neue Version gespeichert");
      };
      if ($stateParams.docid) {
        return Data.document($stateParams.docid).then(function(document) {
          console.dir(document);
          $scope.currentDocument = document;
          return $scope.selectChapter($scope.currentDocument.chapters[0]);
        });
      } else {
        return $state.go('list');
      }
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,