(function() {
  var controllers;

  controllers = angular.module('moedit.Controllers');

  controllers.controller('editController', [
    '$scope', '$log', '$q', '$state', '$stateParams', '$window', 'moedit.Socket', 'moedit.SweetAlert', 'moedit.Focus', 'moedit.Data', 'messageCenterService', function($scope, $log, $q, $state, $stateParams, $window, Socket, SweetAlert, Focus, Data, messageCenterService) {
      var autoSave, autoSaveCurrentDocument, chapterchange;
      autoSaveCurrentDocument = function() {
        $log.debug("autosave");
        return $scope.saveDocument($scope.currentDocument, "Automatisch gespeichert");
      };
      autoSave = _.debounce(autoSaveCurrentDocument, 5000);
      $scope.selectChapter = function(chapter) {
        var c, _i, _len, _ref;
        if ($scope.chapterWatch != null) {
          $scope.chapterWatch();
        }
        $log.info("select chapter " + chapter.title + ":" + chapter.selected);
        $scope.currentChapter = chapter;
        _ref = $scope.currentDocument.chapters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c._id === chapter._id) {
            c.selected = true;
          } else {
            c.selected = false;
          }
        }
        return $scope.chapterWatch = $scope.$watch('currentChapter.content', chapterchange, true);
      };
      chapterchange = function(newValue, oldValue) {
        $log.debug("changed");
        if (newValue !== oldValue) {
          $scope.currentChapter.lastChanged = new Date();
          return autoSave();
        }
      };
      $scope.newComment = function(chapter) {
        chapter.comments.push({
          author: chance.name(),
          text: $scope.newCommentText,
          created: new Date()
        });
        $scope.newCommentText = '';
        return autoSave();
      };
      $scope.newChapter = function(document) {
        document.chapters.push({
          title: $scope.newChapterTitle,
          author: chance.name(),
          lastChanged: new Date(),
          state: 'ONGOING',
          comments: [],
          version: 1
        });
        $scope.newChapterTitle = '';
        return autoSave();
      };
      $scope.saveDocument = function(document, msg) {
        if (msg == null) {
          msg = "Gutachten erfolgreich gespeichert";
        }
        return Data.saveDocument(document).then(function(response) {
          if (response.status !== 200) {
            return messageCenterService.add('danger', msg, {
              html: true
            });
          } else {
            return messageCenterService.add('success', msg, {
              timeout: 2000,
              html: true
            });
          }
        });
      };
      $scope.docStateChanged = function(val) {
        return console.log($scope.currentDocument.state);
      };
      if ($stateParams.docid) {
        return Data.document($stateParams.docid).then(function(document) {
          console.dir(document);
          $scope.currentDocument = document;
          return $scope.selectChapter($scope.currentDocument.chapters[0]);
        });
      } else {
        return $state.go('list');
      }
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2VkaXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxXQUFBOztBQUFBLEVBQUEsV0FBQSxHQUFjLE9BQU8sQ0FBQyxNQUFSLENBQWdCLG9CQUFoQixDQUFkLENBQUE7O0FBQUEsRUFDQSxXQUFXLENBQUMsVUFBWixDQUF3QixnQkFBeEIsRUFBeUM7SUFDdkMsUUFEdUMsRUFFdkMsTUFGdUMsRUFHdkMsSUFIdUMsRUFJdkMsUUFKdUMsRUFLdkMsY0FMdUMsRUFNdkMsU0FOdUMsRUFPdkMsZUFQdUMsRUFRdkMsbUJBUnVDLEVBU3ZDLGNBVHVDLEVBVXZDLGFBVnVDLEVBV3ZDLHNCQVh1QyxFQVl4QyxTQUFDLE1BQUQsRUFBUyxJQUFULEVBQWUsRUFBZixFQUFtQixNQUFuQixFQUEyQixZQUEzQixFQUF5QyxPQUF6QyxFQUFrRCxNQUFsRCxFQUEwRCxVQUExRCxFQUFzRSxLQUF0RSxFQUE2RSxJQUE3RSxFQUFtRixvQkFBbkYsR0FBQTtBQUdDLFVBQUEsZ0RBQUE7QUFBQSxNQUFBLHVCQUFBLEdBQTBCLFNBQUEsR0FBQTtBQUN6QixRQUFBLElBQUksQ0FBQyxLQUFMLENBQVksVUFBWixDQUFBLENBQUE7ZUFDQSxNQUFNLENBQUMsWUFBUCxDQUFvQixNQUFNLENBQUMsZUFBM0IsRUFBNkMseUJBQTdDLEVBRnlCO01BQUEsQ0FBMUIsQ0FBQTtBQUFBLE1BSUEsUUFBQSxHQUFXLENBQUMsQ0FBQyxRQUFGLENBQVcsdUJBQVgsRUFBb0MsSUFBcEMsQ0FKWCxDQUFBO0FBQUEsTUFNQSxNQUFNLENBQUMsYUFBUCxHQUF1QixTQUFDLE9BQUQsR0FBQTtBQUN0QixZQUFBLGlCQUFBO0FBQUEsUUFBQSxJQUFHLDJCQUFIO0FBQ0MsVUFBQSxNQUFNLENBQUMsWUFBUCxDQUFBLENBQUEsQ0FERDtTQUFBO0FBQUEsUUFFQSxJQUFJLENBQUMsSUFBTCxDQUFXLGlCQUFBLEdBQWlCLE9BQU8sQ0FBQyxLQUF6QixHQUEr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TSxDQUFDLGVBQWUsQ0FBQyxLQUFuQyxFQUR3QjtNQUFBLENBbER6QixDQUFBO0FBcURBLE1BQUEsSUFBRyxZQUFZLENBQUMsS0FBaEI7ZUFDQyxJQUFJLENBQUMsUUFBTCxDQUFjLFlBQVksQ0FBQyxLQUEzQixDQUFpQyxDQUFDLElBQWxDLENBQXVDLFNBQUMsUUFBRCxHQUFBO0FBQ3RDLFVBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxRQUFaLENBQUEsQ0FBQTtBQUFBLFVBQ0EsTUFBTSxDQUFDLGVBQVAsR0FBeUIsUUFEekIsQ0FBQTtpQkFFQSxNQUFNLENBQUMsYUFBUCxDQUFxQixNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQXJELEVBSHNDO1FBQUEsQ0FBdkMsRUFERDtPQUFBLE1BQUE7ZUFNQyxNQUFNLENBQUMsRUFBUCxDQUFXLE1BQVgsRUFORDtPQXhERDtJQUFBLENBWndDO0dBQXpDLENBREEsQ0FBQTtBQUFBIiwiZmlsZSI6ImNvbnRyb2xsZXJzL2VkaXQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdtb2VkaXQuQ29udHJvbGxlcnMnKVxuY29udHJvbGxlcnMuY29udHJvbGxlciAnZWRpdENvbnRyb2xsZXInLCBbXG5cdCckc2NvcGUnXG5cdCckbG9nJ1xuXHQnJHEnXG5cdCckc3RhdGUnXG5cdCckc3RhdGVQYXJhbXMnXG5cdCckd2luZG93J1xuXHQnbW9lZGl0LlNvY2tldCdcblx0J21vZWRpdC5Td2VldEFsZXJ0J1xuXHQnbW9lZGl0LkZvY3VzJ1xuXHQnbW9lZGl0LkRhdGEnXG5cdCdtZXNzYWdlQ2VudGVyU2VydmljZSdcblx0KCRzY29wZSwgJGxvZywgJHEsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkd2luZG93LCBTb2NrZXQsIFN3ZWV0QWxlcnQsIEZvY3VzLCBEYXRhLCBtZXNzYWdlQ2VudGVyU2VydmljZSkgLT5cblxuXHRcdCMgYXV0b3NhdmVcblx0XHRhdXRvU2F2ZUN1cnJlbnREb2N1bWVudCA9ICgpIC0+XG5cdFx0XHQkbG9nLmRlYnVnIFwiYXV0b3NhdmVcIlxuXHRcdFx0JHNjb3BlLnNhdmVEb2N1bWVudCgkc2NvcGUuY3VycmVudERvY3VtZW50LCBcIkF1dG9tYXRpc2NoIGdlc3BlaWNoZXJ0XCIpXG5cdFx0XG5cdFx0YXV0b1NhdmUgPSBfLmRlYm91bmNlIGF1dG9TYXZlQ3VycmVudERvY3VtZW50LCA1MDAwXG5cblx0XHQkc2NvcGUuc2VsZWN0Q2hhcHRlciA9IChjaGFwdGVyKSAtPlxuXHRcdFx0aWYgJHNjb3BlLmNoYXB0ZXJXYXRjaD9cblx0XHRcdFx0JHNjb3BlLmNoYXB0ZXJXYXRjaCgpICMgcmVtb3ZlIHdhdGNoXG5cdFx0XHQkbG9nLmluZm8gXCJzZWxlY3QgY2hhcHRlciAje2NoYXB0ZXIudGl0bGV9OiN7Y2hhcHRlci5zZWxlY3RlZH1cIlxuXHRcdFx0JHNjb3BlLmN1cnJlbnRDaGFwdGVyID0gY2hhcHRlclxuXHRcdFx0Zm9yIGMgaW4gJHNjb3BlLmN1cnJlbnREb2N1bWVudC5jaGFwdGVyc1xuXHRcdFx0XHRpZiBjLl9pZCA9PSBjaGFwdGVyLl9pZFxuXHRcdFx0XHRcdGMuc2VsZWN0ZWQgPSB0cnVlXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRjLnNlbGVjdGVkID0gZmFsc2Vcblx0XHRcdCRzY29wZS5jaGFwdGVyV2F0Y2ggPSAkc2NvcGUuJHdhdGNoICdjdXJyZW50Q2hhcHRlci5jb250ZW50JywgY2hhcHRlcmNoYW5nZSwgdHJ1ZVxuXG5cdFx0Y2hhcHRlcmNoYW5nZSA9IChuZXdWYWx1ZSwgb2xkVmFsdWUpIC0+XG5cdFx0XHRcdCRsb2cuZGVidWcgXCJjaGFuZ2VkXCJcblx0XHRcdFx0aWYgbmV3VmFsdWUgIT0gb2xkVmFsdWVcblx0XHRcdFx0XHQkc2NvcGUuY3VycmVudENoYXB0ZXIubGFzdENoYW5nZWQgPSBuZXcgRGF0ZSgpXG5cdFx0XHRcdFx0YXV0b1NhdmUoKVxuXG5cdFx0JHNjb3BlLm5ld0NvbW1lbnQgPSAoY2hhcHRlcikgLT5cblx0XHRcdGNoYXB0ZXIuY29tbWVudHMucHVzaFxuXHRcdFx0XHRhdXRob3I6IGNoYW5jZS5uYW1lKClcblx0XHRcdFx0dGV4dDogJHNjb3BlLm5ld0NvbW1lbnRUZXh0XG5cdFx0XHRcdGNyZWF0ZWQ6IG5ldyBEYXRlKClcblx0XHRcdCRzY29wZS5uZXdDb21tZW50VGV4dCA9ICcnXG5cdFx0XHRhdXRvU2F2ZSgpXG5cblx0XHQkc2NvcGUubmV3Q2hhcHRlciA9IChkb2N1bWVudCkgLT5cblx0XHRcdGRvY3VtZW50LmNoYXB0ZXJzLnB1c2hcblx0XHRcdFx0dGl0bGU6ICRzY29wZS5uZXdDaGFwdGVyVGl0bGVcblx0XHRcdFx0YXV0aG9yOiBjaGFuY2UubmFtZSgpXG5cdFx0XHRcdGxhc3RDaGFuZ2VkOiBuZXcgRGF0ZSgpXG5cdFx0XHRcdHN0YXRlOiAnT05HT0lORydcblx0XHRcdFx0Y29tbWVudHM6IFtdXG5cdFx0XHRcdHZlcnNpb246IDFcblx0XHRcdCRzY29wZS5uZXdDaGFwdGVyVGl0bGUgPSAnJ1xuXHRcdFx0YXV0b1NhdmUoKVxuXG5cdFx0JHNjb3BlLnNhdmVEb2N1bWVudCA9IChkb2N1bWVudCwgbXNnID0gXCJHdXRhY2h0ZW4gZXJmb2xncmVpY2ggZ2VzcGVpY2hlcnRcIikgLT5cblx0XHRcdERhdGEuc2F2ZURvY3VtZW50KGRvY3VtZW50KS50aGVuIChyZXNwb25zZSkgLT5cblx0XHRcdFx0aWYgcmVzcG9uc2Uuc3RhdHVzICE9IDIwMFxuXHRcdFx0XHRcdG1lc3NhZ2VDZW50ZXJTZXJ2aWNlLmFkZCgnZGFuZ2VyJywgbXNnLCB7aHRtbDogdHJ1ZX0pO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0bWVzc2FnZUNlbnRlclNlcnZpY2UuYWRkKCdzdWNjZXNzJywgbXNnLCB7dGltZW91dDogMjAwMCwgaHRtbDogdHJ1ZX0pO1xuXG5cdFx0JHNjb3BlLmRvY1N0YXRlQ2hhbmdlZCA9ICh2YWwpIC0+XG5cdFx0XHRjb25zb2xlLmxvZyAkc2NvcGUuY3VycmVudERvY3VtZW50LnN0YXRlXG5cblx0XHRpZiAkc3RhdGVQYXJhbXMuZG9jaWRcblx0XHRcdERhdGEuZG9jdW1lbnQoJHN0YXRlUGFyYW1zLmRvY2lkKS50aGVuIChkb2N1bWVudCkgLT5cblx0XHRcdFx0Y29uc29sZS5kaXIgZG9jdW1lbnRcblx0XHRcdFx0JHNjb3BlLmN1cnJlbnREb2N1bWVudCA9IGRvY3VtZW50XG5cdFx0XHRcdCRzY29wZS5zZWxlY3RDaGFwdGVyKCRzY29wZS5jdXJyZW50RG9jdW1lbnQuY2hhcHRlcnNbMF0pXG5cdFx0ZWxzZVxuXHRcdFx0JHN0YXRlLmdvICdsaXN0J1xuXVxuIl19