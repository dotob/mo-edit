(function() {
  var controllers;

  controllers = angular.module('moedit.Controllers');

  controllers.controller('editController', [
    '$scope', '$log', '$q', '$state', '$stateParams', '$window', 'moedit.Socket', 'moedit.SweetAlert', 'moedit.Focus', 'moedit.Data', 'messageCenterService', 'ngDialog', function($scope, $log, $q, $state, $stateParams, $window, Socket, SweetAlert, Focus, Data, messageCenterService, ngDialog) {
      var autoSave, autoSaveCurrentDocument, chapterchange, highlightComment, unhighlightAllComments, unhighlightComment;
      autoSaveCurrentDocument = function() {
        $log.debug("autosave");
        return $scope.saveDocument($scope.currentDocument, "Automatisch gespeichert");
      };
      autoSave = _.debounce(autoSaveCurrentDocument, 5000);
      $scope.selectChapter = function(chapter) {
        var c, _i, _len, _ref;
        $log.info("select chapter " + chapter.title + ":" + chapter.selected);
        unhighlightAllComments();
        if ($scope.chapterWatch != null) {
          $scope.chapterWatch();
        }
        $scope.currentChapter = chapter;
        _ref = $scope.currentDocument.chapters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c._id === chapter._id) {
            c.selected = true;
          } else {
            c.selected = false;
          }
        }
        return $scope.chapterWatch = $scope.$watch('currentChapter.content', chapterchange, true);
      };
      $scope.selectComment = function(comment) {
        var c, _i, _len, _ref;
        unhighlightComment($scope.currentComment);
        $log.info("select comment: " + comment.text + ":" + comment.selected);
        $scope.currentComment = comment;
        _ref = $scope.currentChapter.comments;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c.key === comment.key) {
            c.selected = true;
          } else {
            c.selected = false;
          }
        }
        highlightComment($scope.currentComment);
        return true;
      };
      highlightComment = function(comment) {
        if (comment != null) {
          return $("#" + comment.key).addClass('comment-highlight');
        }
      };
      unhighlightComment = function(comment) {
        if (comment != null) {
          return $("#" + comment.key).removeClass('comment-highlight');
        }
      };
      unhighlightAllComments = function() {
        return $(".comment").removeClass('comment-highlight');
      };
      chapterchange = function(newValue, oldValue) {
        var comment, r, removeMe, _i, _j, _len, _len1, _ref;
        $log.debug("changed:: " + $scope.currentChapter.content);
        if (newValue !== oldValue) {
          $scope.currentChapter.lastChanged = new Date();
          if ($scope.commentRemoval) {
            removeMe = [];
            _ref = $scope.currentChapter.comments;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              comment = _ref[_i];
              if (newValue.indexOf(comment.key) < 0) {
                removeMe.push(comment);
              }
            }
            for (_j = 0, _len1 = removeMe.length; _j < _len1; _j++) {
              r = removeMe[_j];
              $scope.deleteComment(r);
            }
            return autoSave();
          }
        }
      };
      $scope.newComment = function(chapter, commentKey) {
        var dialog;
        dialog = ngDialog.open({
          template: 'comment-input-dialog',
          scope: $scope
        });
        return dialog.closePromise.then(function(dialogData) {
          var comment;
          console.log("key: " + commentKey + ", text: " + dialogData.value);
          comment = {
            author: chance.name(),
            key: commentKey,
            created: new Date(),
            text: dialogData.value
          };
          console.dir(chapter);
          chapter.comments.push(comment);
          return autoSave();
        });
      };
      $scope.newChapter = function(document) {
        document.chapters.push({
          title: $scope.newChapterTitle,
          author: chance.name(),
          lastChanged: new Date(),
          state: 'ONGOING',
          comments: [],
          version: 1
        });
        $scope.newChapterTitle = '';
        $scope.selectChapter(_.last(document.chapters));
        return autoSave();
      };
      $scope.saveDocument = function(document, msg) {
        if (msg == null) {
          msg = "Gutachten erfolgreich gespeichert";
        }
        return Data.saveDocument(document).then(function(response) {
          if (response.status !== 200) {
            return messageCenterService.add('danger', msg, {
              html: true
            });
          } else {
            return messageCenterService.add('success', msg, {
              timeout: 2000,
              html: true
            });
          }
        });
      };
      $scope.docStateChanged = function(val) {
        return console.log($scope.currentDocument.state);
      };
      $scope.deleteComment = function(comment) {
        var r;
        unhighlightComment(comment);
        r = new RegExp("<span id=\"" + comment.key + "\" class=\".*?\">");
        $scope.currentChapter.content.replace(r, '', 'g');
        _.remove($scope.currentChapter.comments, function(c) {
          return c.key === comment.key;
        });
        return autoSave();
      };
      $scope.editComment = function(comment) {
        var dialog;
        $scope.newCommentText = comment.text;
        dialog = ngDialog.open({
          template: 'comment-input-dialog',
          scope: $scope
        });
        return dialog.closePromise.then(function(dialogData) {
          console.log("key: " + comment.key + ", text: " + dialogData.value);
          comment.text = dialogData.value;
          return autoSave();
        });
      };
      if ($stateParams.docid) {
        return Data.document($stateParams.docid).then(function(document) {
          console.dir(document);
          $scope.currentDocument = document;
          return $scope.selectChapter($scope.currentDocument.chapters[0]);
        });
      } else {
        return $state.go('list');
      }
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,