(function() {
  var controllers;

  controllers = angular.module('moedit.Controllers');

  controllers.controller('editController', [
    '$scope', '$log', '$q', '$state', '$stateParams', '$window', 'moedit.Socket', 'moedit.SweetAlert', 'moedit.Focus', 'moedit.Data', function($scope, $log, $q, $state, $stateParams, $window, Socket, SweetAlert, Focus, Data) {
      $scope.selectChapter = function(chapter) {
        var c, _i, _len, _ref;
        if ($scope.chapterWatch != null) {
          $scope.chapterWatch();
        }
        $log.info("select chapter " + chapter.title + ":" + chapter.selected);
        $log.debug(chapter.content);
        $scope.currentChapter = chapter;
        _ref = $scope.currentDocument.chapters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c._id === chapter._id) {
            c.selected = true;
          } else {
            c.selected = false;
          }
        }
        return $scope.chapterWatch = $scope.$watch('currentChapter.content', function(val) {
          $scope.currentChapter.lastChanged = new Date();
          return console.log('changed');
        });
      };
      $scope.newComment = function(chapter) {
        return SweetAlert.info('kommt noch');
      };
      $scope.newChapter = function(document) {
        return SweetAlert.info('kommt noch');
      };
      $scope.showPreview = function(document) {
        return $window.open("/preview/" + document._id);
      };
      $scope.downloadWord = function(document) {
        return $window.open("/download/word/" + document._id);
      };
      $scope.saveDocument = function(document) {
        return Data.saveDocument(document);
      };
      console.dir($stateParams);
      return Data.document($stateParams.docid).then(function(document) {
        console.dir(document);
        $scope.currentDocument = document;
        return $scope.selectChapter($scope.currentDocument.chapters[0]);
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2VkaXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxXQUFBOztBQUFBLEVBQUEsV0FBQSxHQUFjLE9BQU8sQ0FBQyxNQUFSLENBQWdCLG9CQUFoQixDQUFkLENBQUE7O0FBQUEsRUFDQSxXQUFXLENBQUMsVUFBWixDQUF3QixnQkFBeEIsRUFBeUM7SUFDdkMsUUFEdUMsRUFFdkMsTUFGdUMsRUFHdkMsSUFIdUMsRUFJdkMsUUFKdUMsRUFLdkMsY0FMdUMsRUFNdkMsU0FOdUMsRUFPdkMsZUFQdUMsRUFRdkMsbUJBUnVDLEVBU3ZDLGNBVHVDLEVBVXZDLGFBVnVDLEVBV3hDLFNBQUMsTUFBRCxFQUFTLElBQVQsRUFBZSxFQUFmLEVBQW1CLE1BQW5CLEVBQTJCLFlBQTNCLEVBQXlDLE9BQXpDLEVBQWtELE1BQWxELEVBQTBELFVBQTFELEVBQXNFLEtBQXRFLEVBQTZFLElBQTdFLEdBQUE7QUFFQyxNQUFBLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLFNBQUMsT0FBRCxHQUFBO0FBQ3RCLFlBQUEsaUJBQUE7QUFBQSxRQUFBLElBQUcsMkJBQUg7QUFDQyxVQUFBLE1BQU0sQ0FBQyxZQUFQLENBQUEsQ0FBQSxDQUREO1NBQUE7QUFBQSxRQUVBLElBQUksQ0FBQyxJQUFMLENBQVcsaUJBQUEsR0FBaUIsT0FBTyxDQUFDLEtBQXpCLEdBQStCLEdBQS9CLEdBQWtDLE9BQU8sQ0FBQyxRQUFyRCxDQUZBLENBQUE7QUFBQSxRQUdBLElBQUksQ0FBQyxLQUFMLENBQVcsT0FBTyxDQUFDLE9BQW5CLENBSEEsQ0FBQTtBQUFBLFFBSUEsTUFBTSxDQUFDLGNBQVAsR0FBd0IsT0FKeEIsQ0FBQTtBQUtBO0FBQUEsYUFBQSwyQ0FBQTt1QkFBQTtBQUNDLFVBQUEsSUFBRyxDQUFDLENBQUMsR0FBRixLQUFTLE9BQU8sQ0FBQyxHQUFwQjtBQUNDLFlBQUEsQ0FBQyxDQUFDLFFBQUYsR0FBYSxJQUFiLENBREQ7V0FBQSxNQUFBO0FBR0MsWUFBQSxDQUFDLENBQUMsUUFBRixHQUFhLEtBQWIsQ0FIRDtXQUREO0FBQUEsU0FMQTtlQVVBLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLE1BQU0sQ0FBQyxNQUFQLENBQWUsd0JBQWYsRUFBd0MsU0FBQyxHQUFELEdBQUE7QUFDN0QsVUFBQSxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQXRCLEdBQXdDLElBQUEsSUFBQSxDQUFBLENBQXhDLENBQUE7aUJBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBYSxTQUFiLEVBRjZEO1FBQUEsQ0FBeEMsRUFYQTtNQUFBLENBQXZCLENBQUE7QUFBQSxNQWVBLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLFNBQUMsT0FBRCxHQUFBO2VBQ25CLFVBQVUsQ0FBQyxJQUFYLENBQWlCLFlBQWpCLEVBRG1CO01BQUEsQ0FmcEIsQ0FBQTtBQUFBLE1Ba0JBLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLFNBQUMsUUFBRCxHQUFBO2VBQ25CLFVBQVUsQ0FBQyxJQUFYLENBQWlCLFlBQWpCLEVBRG1CO01BQUEsQ0FsQnBCLENBQUE7QUFBQSxNQXFCQSxNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFDLFFBQUQsR0FBQTtlQUNwQixPQUFPLENBQUMsSUFBUixDQUFjLFdBQUEsR0FBVyxRQUFRLENBQUMsR0FBbEMsRUFEb0I7TUFBQSxDQXJCckIsQ0FBQTtBQUFBLE1Bd0JBLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLFNBQUMsUUFBRCxHQUFBO2VBQ3JCLE9BQU8sQ0FBQyxJQUFSLENBQWMsaUJBQUEsR0FBaUIsUUFBUSxDQUFDLEdBQXhDLEVBRHFCO01BQUEsQ0F4QnRCLENBQUE7QUFBQSxNQTJCQSxNQUFNLENBQUMsWUFBUCxHQUFzQixTQUFDLFFBQUQsR0FBQTtlQUNyQixJQUFJLENBQUMsWUFBTCxDQUFrQixRQUFsQixFQURxQjtNQUFBLENBM0J0QixDQUFBO0FBQUEsTUE4QkEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxZQUFaLENBOUJBLENBQUE7YUErQkEsSUFBSSxDQUFDLFFBQUwsQ0FBYyxZQUFZLENBQUMsS0FBM0IsQ0FBaUMsQ0FBQyxJQUFsQyxDQUF1QyxTQUFDLFFBQUQsR0FBQTtBQUN0QyxRQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBWixDQUFBLENBQUE7QUFBQSxRQUNBLE1BQU0sQ0FBQyxlQUFQLEdBQXlCLFFBRHpCLENBQUE7ZUFFQSxNQUFNLENBQUMsYUFBUCxDQUFxQixNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQXJELEVBSHNDO01BQUEsQ0FBdkMsRUFqQ0Q7SUFBQSxDQVh3QztHQUF6QyxDQURBLENBQUE7QUFBQSIsImZpbGUiOiJjb250cm9sbGVycy9lZGl0LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnbW9lZGl0LkNvbnRyb2xsZXJzJylcclxuY29udHJvbGxlcnMuY29udHJvbGxlciAnZWRpdENvbnRyb2xsZXInLCBbXHJcblx0JyRzY29wZSdcclxuXHQnJGxvZydcclxuXHQnJHEnXHJcblx0JyRzdGF0ZSdcclxuXHQnJHN0YXRlUGFyYW1zJ1xyXG5cdCckd2luZG93J1xyXG5cdCdtb2VkaXQuU29ja2V0J1xyXG5cdCdtb2VkaXQuU3dlZXRBbGVydCdcclxuXHQnbW9lZGl0LkZvY3VzJ1xyXG5cdCdtb2VkaXQuRGF0YSdcclxuXHQoJHNjb3BlLCAkbG9nLCAkcSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsICR3aW5kb3csIFNvY2tldCwgU3dlZXRBbGVydCwgRm9jdXMsIERhdGEpIC0+XHJcblxyXG5cdFx0JHNjb3BlLnNlbGVjdENoYXB0ZXIgPSAoY2hhcHRlcikgLT5cclxuXHRcdFx0aWYgJHNjb3BlLmNoYXB0ZXJXYXRjaD9cclxuXHRcdFx0XHQkc2NvcGUuY2hhcHRlcldhdGNoKCkgIyByZW1vdmUgd2F0Y2hcclxuXHRcdFx0JGxvZy5pbmZvIFwic2VsZWN0IGNoYXB0ZXIgI3tjaGFwdGVyLnRpdGxlfToje2NoYXB0ZXIuc2VsZWN0ZWR9XCJcclxuXHRcdFx0JGxvZy5kZWJ1ZyBjaGFwdGVyLmNvbnRlbnRcclxuXHRcdFx0JHNjb3BlLmN1cnJlbnRDaGFwdGVyID0gY2hhcHRlclxyXG5cdFx0XHRmb3IgYyBpbiAkc2NvcGUuY3VycmVudERvY3VtZW50LmNoYXB0ZXJzXHJcblx0XHRcdFx0aWYgYy5faWQgPT0gY2hhcHRlci5faWRcclxuXHRcdFx0XHRcdGMuc2VsZWN0ZWQgPSB0cnVlXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0Yy5zZWxlY3RlZCA9IGZhbHNlXHJcblx0XHRcdCRzY29wZS5jaGFwdGVyV2F0Y2ggPSAkc2NvcGUuJHdhdGNoICdjdXJyZW50Q2hhcHRlci5jb250ZW50JywgKHZhbCkgLT5cclxuXHRcdFx0XHQkc2NvcGUuY3VycmVudENoYXB0ZXIubGFzdENoYW5nZWQgPSBuZXcgRGF0ZSgpXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgJ2NoYW5nZWQnXHJcblxyXG5cdFx0JHNjb3BlLm5ld0NvbW1lbnQgPSAoY2hhcHRlcikgLT5cclxuXHRcdFx0U3dlZXRBbGVydC5pbmZvICdrb21tdCBub2NoJ1xyXG5cclxuXHRcdCRzY29wZS5uZXdDaGFwdGVyID0gKGRvY3VtZW50KSAtPlxyXG5cdFx0XHRTd2VldEFsZXJ0LmluZm8gJ2tvbW10IG5vY2gnXHJcblxyXG5cdFx0JHNjb3BlLnNob3dQcmV2aWV3ID0gKGRvY3VtZW50KSAtPlxyXG5cdFx0XHQkd2luZG93Lm9wZW4gXCIvcHJldmlldy8je2RvY3VtZW50Ll9pZH1cIlxyXG5cclxuXHRcdCRzY29wZS5kb3dubG9hZFdvcmQgPSAoZG9jdW1lbnQpIC0+XHJcblx0XHRcdCR3aW5kb3cub3BlbiBcIi9kb3dubG9hZC93b3JkLyN7ZG9jdW1lbnQuX2lkfVwiXHJcblxyXG5cdFx0JHNjb3BlLnNhdmVEb2N1bWVudCA9IChkb2N1bWVudCkgLT5cclxuXHRcdFx0RGF0YS5zYXZlRG9jdW1lbnQgZG9jdW1lbnRcclxuXHJcblx0XHRjb25zb2xlLmRpciAkc3RhdGVQYXJhbXNcclxuXHRcdERhdGEuZG9jdW1lbnQoJHN0YXRlUGFyYW1zLmRvY2lkKS50aGVuIChkb2N1bWVudCkgLT5cclxuXHRcdFx0Y29uc29sZS5kaXIgZG9jdW1lbnRcclxuXHRcdFx0JHNjb3BlLmN1cnJlbnREb2N1bWVudCA9IGRvY3VtZW50XHJcblx0XHRcdCRzY29wZS5zZWxlY3RDaGFwdGVyKCRzY29wZS5jdXJyZW50RG9jdW1lbnQuY2hhcHRlcnNbMF0pXHJcblx0XHRcdFxyXG5cclxuXVxyXG4iXX0=